
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003fa0  08003fa0  00004fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  000061ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004044  08004044  000061ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00005044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004048  08004048  00005048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  0800404c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001ac  080041f8  000061ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  080041f8  000064a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a61f  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5f  00000000  00000000  000107fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00012760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000720  00000000  00000000  000130f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271de  00000000  00000000  00013818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae8c  00000000  00000000  0003a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0dd8  00000000  00000000  00045882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013665a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  001366a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00139144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ac 	.word	0x200001ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f88 	.word	0x08003f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b0 	.word	0x200001b0
 80001cc:	08003f88 	.word	0x08003f88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 f9be 	bl	8003608 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fa98 	bl	800180c <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 f999 	bl	8003618 <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa9d 	bl	8000830 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 f982 	bl	8003618 <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa86 	bl	8000830 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 f956 	bl	8003618 <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2306      	movs	r3, #6
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb20 	bl	80009bc <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f942 	bl	8003618 <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa46 	bl	8000830 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f92b 	bl	8003618 <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa2f 	bl	8000830 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f914 	bl	8003618 <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa18 	bl	8000830 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 f8fd 	bl	8003618 <free>

	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f989 	bl	8000734 <setConnectable>

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa4e 	bl	80008c8 <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa7e 	bl	8000938 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa76 	bl	8000938 <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002e0 	.word	0x200002e0
 8000458:	200002e4 	.word	0x200002e4
 800045c:	20000000 	.word	0x20000000
 8000460:	200002de 	.word	0x200002de
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001c8 	.word	0x200001c8
 8000478:	200001cc 	.word	0x200001cc
 800047c:	200001d0 	.word	0x200001d0
 8000480:	20000114 	.word	0x20000114
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002d4 	.word	0x200002d4
 80004a0:	2000011c 	.word	0x2000011c
 80004a4:	200002dc 	.word	0x200002dc
 80004a8:	2000013c 	.word	0x2000013c
 80004ac:	200002d8 	.word	0x200002d8
 80004b0:	2000012c 	.word	0x2000012c

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fc7b 	bl	8001dcc <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 f995 	bl	800180c <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fc87 	bl	8001dfc <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fcfd 	bl	8002efc <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fc77 	bl	8001dfc <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 f97c 	bl	800180c <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fc6e 	bl	8001dfc <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fce4 	bl	8002efc <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 fcc5 	bl	8002efc <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fc38 	bl	8001dfc <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fc2d 	bl	8001dfc <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08003fa0 	.word	0x08003fa0
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002e8 	.word	0x200002e8
 80005c4:	200002e4 	.word	0x200002e4

080005c8 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fbe1 	bl	8001dfc <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fc57 	bl	8002efc <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fad2 	bl	8002c12 <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fbbb 	bl	8001dfc <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>

 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08003fa8 	.word	0x08003fa8
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002e8 	.word	0x200002e8
 80006a8:	200002e4 	.word	0x200002e4

080006ac <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b6:	217f      	movs	r1, #127	@ 0x7f
 80006b8:	4819      	ldr	r0, [pc, #100]	@ (8000720 <catchBLE+0x74>)
 80006ba:	f7ff fefb 	bl	80004b4 <fetchBleEvent>
 80006be:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d128      	bne.n	8000718 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c6:	2203      	movs	r2, #3
 80006c8:	4916      	ldr	r1, [pc, #88]	@ (8000724 <catchBLE+0x78>)
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <catchBLE+0x74>)
 80006cc:	f7ff ff7c 	bl	80005c8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d0:	2205      	movs	r2, #5
 80006d2:	4915      	ldr	r1, [pc, #84]	@ (8000728 <catchBLE+0x7c>)
 80006d4:	4812      	ldr	r0, [pc, #72]	@ (8000720 <catchBLE+0x74>)
 80006d6:	f7ff ff77 	bl	80005c8 <checkEventResp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <catchBLE+0x74>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <catchBLE+0x80>)
 80006e8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <catchBLE+0x74>)
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <catchBLE+0x80>)
 80006f2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 80006f4:	2205      	movs	r2, #5
 80006f6:	490e      	ldr	r1, [pc, #56]	@ (8000730 <catchBLE+0x84>)
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <catchBLE+0x74>)
 80006fa:	f7ff ff65 	bl	80005c8 <checkEventResp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d109      	bne.n	8000718 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <catchBLE+0x74>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <catchBLE+0x80>)
 800070c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <catchBLE+0x74>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <catchBLE+0x80>)
 8000716:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001d4 	.word	0x200001d4
 8000724:	200000ec 	.word	0x200000ec
 8000728:	200000f8 	.word	0x200000f8
 800072c:	2000014c 	.word	0x2000014c
 8000730:	20000100 	.word	0x20000100

08000734 <setConnectable>:

 void setConnectable(){
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800073a:	200b      	movs	r0, #11
 800073c:	f002 ff64 	bl	8003608 <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a36      	ldr	r2, [pc, #216]	@ (8000820 <setConnectable+0xec>)
 8000748:	6810      	ldr	r0, [r2, #0]
 800074a:	6018      	str	r0, [r3, #0]
 800074c:	8892      	ldrh	r2, [r2, #4]
 800074e:	809a      	strh	r2, [r3, #4]
 		localname[sizeof(deviceName)+1]=0x00;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3307      	adds	r3, #7
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3309      	adds	r3, #9
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	330a      	adds	r3, #10
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3306      	adds	r3, #6
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <setConnectable+0xf0>)
 800077a:	2207      	movs	r2, #7
 800077c:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <setConnectable+0xf0>)
 8000780:	2214      	movs	r2, #20
 8000782:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000784:	2018      	movs	r0, #24
 8000786:	f002 ff3f 	bl	8003608 <malloc>
 800078a:	4603      	mov	r3, r0
 800078c:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <setConnectable+0xf0>)
 8000792:	461c      	mov	r4, r3
 8000794:	4613      	mov	r3, r2
 8000796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000798:	6020      	str	r0, [r4, #0]
 800079a:	6061      	str	r1, [r4, #4]
 800079c:	60a2      	str	r2, [r4, #8]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	330d      	adds	r3, #13
 80007a6:	220b      	movs	r2, #11
 80007a8:	68f9      	ldr	r1, [r7, #12]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 f85e 	bl	800386c <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007b0:	2007      	movs	r0, #7
 80007b2:	f002 ff29 	bl	8003608 <malloc>
 80007b6:	4603      	mov	r3, r0
 80007b8:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007ba:	2107      	movs	r1, #7
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fe79 	bl	80004b4 <fetchBleEvent>
 80007c2:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c4:	2118      	movs	r1, #24
 80007c6:	68b8      	ldr	r0, [r7, #8]
 80007c8:	f7ff ff24 	bl	8000614 <sendCommand>
 		HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f001 f81d 	bl	800180c <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 80007d2:	2107      	movs	r1, #7
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe6d 	bl	80004b4 <fetchBleEvent>
 80007da:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10e      	bne.n	8000800 <setConnectable+0xcc>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 80007e2:	2207      	movs	r2, #7
 80007e4:	4910      	ldr	r1, [pc, #64]	@ (8000828 <setConnectable+0xf4>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff feee 	bl	80005c8 <checkEventResp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d106      	bne.n	8000800 <setConnectable+0xcc>
 			  stackInitCompleteFlag|=0x80;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <setConnectable+0xf8>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <setConnectable+0xf8>)
 80007fe:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f002 ff09 	bl	8003618 <free>
 		free(discoverableCommand);
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f002 ff06 	bl	8003618 <free>
 		free(localname);
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f002 ff03 	bl	8003618 <free>
 		HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f000 fffa 	bl	800180c <HAL_Delay>
  }
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000114 	.word	0x20000114
 8000824:	20000078 	.word	0x20000078
 8000828:	20000088 	.word	0x20000088
 800082c:	200002de 	.word	0x200002de

08000830 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 800083e:	68b9      	ldr	r1, [r7, #8]
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fee7 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	005a      	lsls	r2, r3, #1
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f002 feda 	bl	8003608 <malloc>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <BLE_command+0x90>)
 800085a:	601a      	str	r2, [r3, #0]

		long contatore=0;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000860:	e007      	b.n	8000872 <BLE_command+0x42>
			contatore++;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800086e:	4293      	cmp	r3, r2
 8000870:	dc07      	bgt.n	8000882 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000872:	2140      	movs	r1, #64	@ 0x40
 8000874:	4813      	ldr	r0, [pc, #76]	@ (80008c4 <BLE_command+0x94>)
 8000876:	f001 faa9 	bl	8001dcc <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f0      	beq.n	8000862 <BLE_command+0x32>
 8000880:	e000      	b.n	8000884 <BLE_command+0x54>
				break;
 8000882:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000884:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <BLE_command+0x90>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	005a      	lsls	r2, r3, #1
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4619      	mov	r1, r3
 8000892:	f7ff fe0f 	bl	80004b4 <fetchBleEvent>
 8000896:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d107      	bne.n	80008ae <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <BLE_command+0x90>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe8e 	bl	80005c8 <checkEventResp>
 80008ac:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 ffac 	bl	800180c <HAL_Delay>


	 return response;
 80008b4:	697b      	ldr	r3, [r7, #20]
 }
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002e0 	.word	0x200002e0
 80008c4:	48001000 	.word	0x48001000

080008c8 <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <addService+0x60>)
 80008d6:	2210      	movs	r2, #16
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ffc6 	bl	800386c <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <addService+0x64>)
 80008e6:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2307      	movs	r3, #7
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <addService+0x68>)
 80008f0:	2117      	movs	r1, #23
 80008f2:	480e      	ldr	r0, [pc, #56]	@ (800092c <addService+0x64>)
 80008f4:	f7ff ff9c 	bl	8000830 <BLE_command>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10a      	bne.n	8000914 <addService+0x4c>
			handle[0]=rxEvent[7];
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <addService+0x6c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	79da      	ldrb	r2, [r3, #7]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <addService+0x6c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3301      	adds	r3, #1
 8000910:	7a12      	ldrb	r2, [r2, #8]
 8000912:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <addService+0x6c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fe7d 	bl	8003618 <free>
 }
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000095 	.word	0x20000095
 800092c:	20000090 	.word	0x20000090
 8000930:	200000a8 	.word	0x200000a8
 8000934:	200002e0 	.word	0x200002e0

08000938 <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <addCharacteristic+0x74>)
 8000948:	2210      	movs	r2, #16
 800094a:	68f9      	ldr	r1, [r7, #12]
 800094c:	4618      	mov	r0, r3
 800094e:	f002 ff8d 	bl	800386c <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <addCharacteristic+0x78>)
 8000958:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	785a      	ldrb	r2, [r3, #1]
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <addCharacteristic+0x78>)
 8000960:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000962:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <addCharacteristic+0x78>)
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000968:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <addCharacteristic+0x78>)
 800096a:	7e3b      	ldrb	r3, [r7, #24]
 800096c:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800096e:	2301      	movs	r3, #1
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2307      	movs	r3, #7
 8000974:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <addCharacteristic+0x7c>)
 8000976:	211e      	movs	r1, #30
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <addCharacteristic+0x78>)
 800097a:	f7ff ff59 	bl	8000830 <BLE_command>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <addCharacteristic+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	79da      	ldrb	r2, [r3, #7]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <addCharacteristic+0x80>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	7a12      	ldrb	r2, [r2, #8]
 8000998:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <addCharacteristic+0x80>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fe3a 	bl	8003618 <free>
 }
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000b7 	.word	0x200000b7
 80009b0:	200000b0 	.word	0x200000b0
 80009b4:	200000d0 	.word	0x200000d0
 80009b8:	200002e0 	.word	0x200002e0

080009bc <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	3306      	adds	r3, #6
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <updateCharValue+0x9c>)
 80009d4:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <updateCharValue+0x9c>)
 80009dc:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	785a      	ldrb	r2, [r3, #1]
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <updateCharValue+0x9c>)
 80009e4:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <updateCharValue+0x9c>)
 80009ec:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	785a      	ldrb	r2, [r3, #1]
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <updateCharValue+0x9c>)
 80009f4:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <updateCharValue+0x9c>)
 80009fc:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <updateCharValue+0x9c>)
 8000a04:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	330a      	adds	r3, #10
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fdfc 	bl	8003608 <malloc>
 8000a10:	4603      	mov	r3, r0
 8000a12:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a14:	220a      	movs	r2, #10
 8000a16:	4910      	ldr	r1, [pc, #64]	@ (8000a58 <updateCharValue+0x9c>)
 8000a18:	6978      	ldr	r0, [r7, #20]
 8000a1a:	f002 ff27 	bl	800386c <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	330a      	adds	r3, #10
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	6a39      	ldr	r1, [r7, #32]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 ff20 	bl	800386c <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	f103 010a 	add.w	r1, r3, #10
 8000a32:	2300      	movs	r3, #0
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2307      	movs	r3, #7
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <updateCharValue+0xa0>)
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff fef8 	bl	8000830 <BLE_command>

	 free(commandComplete);
 8000a40:	6978      	ldr	r0, [r7, #20]
 8000a42:	f002 fde9 	bl	8003618 <free>
	 free(rxEvent);
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <updateCharValue+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fde4 	bl	8003618 <free>
 }
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000d8 	.word	0x200000d8
 8000a5c:	200000d0 	.word	0x200000d0
 8000a60:	200002e0 	.word	0x200002e0

08000a64 <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <disconnectBLE+0x98>)
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d105      	bne.n	8000a82 <disconnectBLE+0x1e>
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <disconnectBLE+0x98>)
 8000a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d037      	beq.n	8000af2 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <disconnectBLE+0x9c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <disconnectBLE+0x98>)
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <disconnectBLE+0x98>)
 8000a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000a9c:	2313      	movs	r3, #19
 8000a9e:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aa0:	1d38      	adds	r0, r7, #4
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <disconnectBLE+0xa0>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	f7ff fec0 	bl	8000830 <BLE_command>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11e      	bne.n	8000af4 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000ab6:	217f      	movs	r1, #127	@ 0x7f
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <disconnectBLE+0xa4>)
 8000aba:	f7ff fcfb 	bl	80004b4 <fetchBleEvent>
 8000abe:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10f      	bne.n	8000ae6 <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	4910      	ldr	r1, [pc, #64]	@ (8000b0c <disconnectBLE+0xa8>)
 8000aca:	480f      	ldr	r0, [pc, #60]	@ (8000b08 <disconnectBLE+0xa4>)
 8000acc:	f7ff fd7c 	bl	80005c8 <checkEventResp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d107      	bne.n	8000ae6 <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <disconnectBLE+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000adc:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <disconnectBLE+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <disconnectBLE+0xac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fd94 	bl	8003618 <free>
 8000af0:	e000      	b.n	8000af4 <disconnectBLE+0x90>
		return;
 8000af2:	bf00      	nop
	 }
 }
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000014c 	.word	0x2000014c
 8000b00:	200000e8 	.word	0x200000e8
 8000b04:	200000f0 	.word	0x200000f0
 8000b08:	200001d4 	.word	0x200001d4
 8000b0c:	200000ec 	.word	0x200000ec
 8000b10:	200002e0 	.word	0x200002e0

08000b14 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <setDiscoverability+0x16>
		 setConnectable();
 8000b24:	f7ff fe06 	bl	8000734 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b28:	e00f      	b.n	8000b4a <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10c      	bne.n	8000b4a <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2307      	movs	r3, #7
 8000b36:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <setDiscoverability+0x40>)
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <setDiscoverability+0x44>)
 8000b3c:	f7ff fe78 	bl	8000830 <BLE_command>
		 free(rxEvent);
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <setDiscoverability+0x48>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fd67 	bl	8003618 <free>
 }
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000010c 	.word	0x2000010c
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	200002e0 	.word	0x200002e0

08000b60 <i2c_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void i2c_init()
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    // set clocks
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b64:	4b35      	ldr	r3, [pc, #212]	@ (8000c3c <i2c_init+0xdc>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b68:	4a34      	ldr	r2, [pc, #208]	@ (8000c3c <i2c_init+0xdc>)
 8000b6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b6e:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b70:	4b32      	ldr	r3, [pc, #200]	@ (8000c3c <i2c_init+0xdc>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <i2c_init+0xdc>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // clear pe bit to disable the peripheral
    I2C2->CR1 &= ~I2C_CR1_PE;
 8000b7c:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <i2c_init+0xe0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a2f      	ldr	r2, [pc, #188]	@ (8000c40 <i2c_init+0xe0>)
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]

    // configure the timing register for 100 kHz
    I2C2->TIMINGR &= ~I2C_TIMINGR_PRESC; // set the prescaler to 0
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <i2c_init+0xe0>)
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c40 <i2c_init+0xe0>)
 8000b8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000b92:	6113      	str	r3, [r2, #16]

    I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <i2c_init+0xe0>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	4a29      	ldr	r2, [pc, #164]	@ (8000c40 <i2c_init+0xe0>)
 8000b9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b9e:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= (0x4UL << I2C_TIMINGR_SCLDEL_Pos); // set the SCLDEL to 4
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <i2c_init+0xe0>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	4a26      	ldr	r2, [pc, #152]	@ (8000c40 <i2c_init+0xe0>)
 8000ba6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000baa:	6113      	str	r3, [r2, #16]

    I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;
 8000bac:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <i2c_init+0xe0>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <i2c_init+0xe0>)
 8000bb2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000bb6:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= (0x2UL << I2C_TIMINGR_SDADEL_Pos); // set the SDADEL to 2
 8000bb8:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <i2c_init+0xe0>)
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	4a20      	ldr	r2, [pc, #128]	@ (8000c40 <i2c_init+0xe0>)
 8000bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc2:	6113      	str	r3, [r2, #16]

    I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <i2c_init+0xe0>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c40 <i2c_init+0xe0>)
 8000bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000bce:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= (0xFUL << I2C_TIMINGR_SCLH_Pos); // set the SCLH to 15
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <i2c_init+0xe0>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <i2c_init+0xe0>)
 8000bd6:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000bda:	6113      	str	r3, [r2, #16]

    I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <i2c_init+0xe0>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <i2c_init+0xe0>)
 8000be2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000be6:	6113      	str	r3, [r2, #16]
    I2C2->TIMINGR |= (0x13UL << I2C_TIMINGR_SCLL_Pos); // set the SCLL to 19
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <i2c_init+0xe0>)
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <i2c_init+0xe0>)
 8000bee:	f043 0313 	orr.w	r3, r3, #19
 8000bf2:	6113      	str	r3, [r2, #16]

    // set PB10 and PB11 to alternate function mode
    GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <i2c_init+0xe4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <i2c_init+0xe4>)
 8000bfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bfe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <i2c_init+0xe4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <i2c_init+0xe4>)
 8000c06:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000c0a:	6013      	str	r3, [r2, #0]

    // set alternate function to I2C2 (AF4) for PB10 and PB11
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <i2c_init+0xe4>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c10:	4a0c      	ldr	r2, [pc, #48]	@ (8000c44 <i2c_init+0xe4>)
 8000c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c16:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (0x4 << GPIO_AFRH_AFSEL10_Pos | 0x4 << GPIO_AFRH_AFSEL11_Pos);
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <i2c_init+0xe4>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c1c:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <i2c_init+0xe4>)
 8000c1e:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000c22:	6253      	str	r3, [r2, #36]	@ 0x24

    // set pe bit to enable the peripheral
    I2C2->CR1 |= I2C_CR1_PE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <i2c_init+0xe0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <i2c_init+0xe0>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]
};
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40005800 	.word	0x40005800
 8000c44:	48000400 	.word	0x48000400

08000c48 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t *data, uint8_t len)
{   
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	603a      	str	r2, [r7, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	460b      	mov	r3, r1
 8000c58:	71bb      	strb	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	717b      	strb	r3, [r7, #5]
    // wait until I2C is not busy
    while (I2C2->ISR & I2C_ISR_BUSY);
 8000c5e:	bf00      	nop
 8000c60:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <i2c_transaction+0x110>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f9      	bne.n	8000c60 <i2c_transaction+0x18>

    // set secondary address 
    I2C2->CR2 &= ~I2C_CR2_SADD;
 8000c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d58 <i2c_transaction+0x110>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a39      	ldr	r2, [pc, #228]	@ (8000d58 <i2c_transaction+0x110>)
 8000c72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	6053      	str	r3, [r2, #4]
    I2C2->CR2 |= (address << 1);
 8000c7c:	4b36      	ldr	r3, [pc, #216]	@ (8000d58 <i2c_transaction+0x110>)
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4934      	ldr	r1, [pc, #208]	@ (8000d58 <i2c_transaction+0x110>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	604b      	str	r3, [r1, #4]

    // set read/write bit
    I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <i2c_transaction+0x110>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a32      	ldr	r2, [pc, #200]	@ (8000d58 <i2c_transaction+0x110>)
 8000c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c94:	6053      	str	r3, [r2, #4]
    I2C2->CR2 |= (dir << I2C_CR2_RD_WRN_Pos);
 8000c96:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <i2c_transaction+0x110>)
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	029b      	lsls	r3, r3, #10
 8000c9e:	492e      	ldr	r1, [pc, #184]	@ (8000d58 <i2c_transaction+0x110>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]

    // set the number of bytes to transfer
    I2C2->CR2 &= ~I2C_CR2_NBYTES;
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <i2c_transaction+0x110>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8000d58 <i2c_transaction+0x110>)
 8000caa:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000cae:	6053      	str	r3, [r2, #4]
    I2C2->CR2 |= (len << I2C_CR2_NBYTES_Pos);
 8000cb0:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <i2c_transaction+0x110>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	041b      	lsls	r3, r3, #16
 8000cb8:	4927      	ldr	r1, [pc, #156]	@ (8000d58 <i2c_transaction+0x110>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	604b      	str	r3, [r1, #4]

    I2C2->CR2 |= I2C_CR2_AUTOEND; // set autoend so that hardware automatically sends stop bit
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <i2c_transaction+0x110>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	4a25      	ldr	r2, [pc, #148]	@ (8000d58 <i2c_transaction+0x110>)
 8000cc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cc8:	6053      	str	r3, [r2, #4]

    // start the transfer
    I2C2->CR2 |= I2C_CR2_START;
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <i2c_transaction+0x110>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <i2c_transaction+0x110>)
 8000cd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cd4:	6053      	str	r3, [r2, #4]

    // write or read data
    if (!dir)
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d117      	bne.n	8000d0c <i2c_transaction+0xc4>
    {

        for (int i = 0; i < len; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e00f      	b.n	8000d02 <i2c_transaction+0xba>
        {
            // wait for TXIS to be set
            while (!(I2C2->ISR & I2C_ISR_TXIS));
 8000ce2:	bf00      	nop
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <i2c_transaction+0x110>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f9      	beq.n	8000ce4 <i2c_transaction+0x9c>
            I2C2->TXDR = data[i];
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <i2c_transaction+0x110>)
 8000cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        for (int i = 0; i < len; i++)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbeb      	blt.n	8000ce2 <i2c_transaction+0x9a>
 8000d0a:	e017      	b.n	8000d3c <i2c_transaction+0xf4>
        }
    }
    else
    {

        for (int i = 0; i < len; i++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	e010      	b.n	8000d34 <i2c_transaction+0xec>
        {
            // wait for RXNE to be set
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8000d12:	bf00      	nop
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <i2c_transaction+0x110>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f9      	beq.n	8000d14 <i2c_transaction+0xcc>
            data[i] = I2C2->RXDR;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <i2c_transaction+0x110>)
 8000d22:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < len; i++)
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	797b      	ldrb	r3, [r7, #5]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbea      	blt.n	8000d12 <i2c_transaction+0xca>
        }
    }

    // wait for transfer to complete
    while (!(I2C2->ISR & I2C_ISR_STOPF));
 8000d3c:	bf00      	nop
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <i2c_transaction+0x110>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0320 	and.w	r3, r3, #32
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <i2c_transaction+0xf6>


    return 0;
 8000d4a:	2300      	movs	r3, #0
};
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	40005800 	.word	0x40005800

08000d5c <lsm6dsl_init>:

/* Include type definitions */
#include <stm32l475xx.h>

void lsm6dsl_init()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

    uint8_t ctrl1_xl[2] = {0x10, 0x60};
 8000d62:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000d66:	80bb      	strh	r3, [r7, #4]
    uint8_t int1_ctrl[2] = {0x0D, 0x01};
 8000d68:	f240 130d 	movw	r3, #269	@ 0x10d
 8000d6c:	803b      	strh	r3, [r7, #0]

    i2c_transaction(0x6a, 0, ctrl1_xl, 2); // write CTRL1_XL = 60h
 8000d6e:	1d3a      	adds	r2, r7, #4
 8000d70:	2302      	movs	r3, #2
 8000d72:	2100      	movs	r1, #0
 8000d74:	206a      	movs	r0, #106	@ 0x6a
 8000d76:	f7ff ff67 	bl	8000c48 <i2c_transaction>

    i2c_transaction(0x6a, 0, int1_ctrl, 2); // write INT1_CTRL = 01h
 8000d7a:	463a      	mov	r2, r7
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	2100      	movs	r1, #0
 8000d80:	206a      	movs	r0, #106	@ 0x6a
 8000d82:	f7ff ff61 	bl	8000c48 <i2c_transaction>
};
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t *x, int16_t *y, int16_t *z)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]

    uint8_t status[2] = {0x1E, 0};
 8000d9c:	231e      	movs	r3, #30
 8000d9e:	843b      	strh	r3, [r7, #32]

    // wait until XLDA (bit 0) is set
    while (!(status[1] & 0x01))
 8000da0:	e00e      	b.n	8000dc0 <lsm6dsl_read_xyz+0x30>
    {
        i2c_transaction(0x6a, 0, status, 1);
 8000da2:	f107 0220 	add.w	r2, r7, #32
 8000da6:	2301      	movs	r3, #1
 8000da8:	2100      	movs	r1, #0
 8000daa:	206a      	movs	r0, #106	@ 0x6a
 8000dac:	f7ff ff4c 	bl	8000c48 <i2c_transaction>
        i2c_transaction(0x6a, 1, status + 1, 1);
 8000db0:	f107 0220 	add.w	r2, r7, #32
 8000db4:	3201      	adds	r2, #1
 8000db6:	2301      	movs	r3, #1
 8000db8:	2101      	movs	r1, #1
 8000dba:	206a      	movs	r0, #106	@ 0x6a
 8000dbc:	f7ff ff44 	bl	8000c48 <i2c_transaction>
    while (!(status[1] & 0x01))
 8000dc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0ea      	beq.n	8000da2 <lsm6dsl_read_xyz+0x12>
    }

    // set up registers and write buffers for x, y, z
    uint8_t dataX[4] = {0x28, 0, 0x29, 0};
 8000dcc:	4b33      	ldr	r3, [pc, #204]	@ (8000e9c <lsm6dsl_read_xyz+0x10c>)
 8000dce:	61fb      	str	r3, [r7, #28]
    uint8_t dataY[4] = {0x2A, 0, 0x2B, 0};
 8000dd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <lsm6dsl_read_xyz+0x110>)
 8000dd2:	61bb      	str	r3, [r7, #24]
    uint8_t dataZ[4] = {0x2C, 0, 0x2D, 0};
 8000dd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ea4 <lsm6dsl_read_xyz+0x114>)
 8000dd6:	617b      	str	r3, [r7, #20]

    // loop through low then high registers for x, y, z
    for (int i = 0; i < 4; i = i + 2)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ddc:	e03b      	b.n	8000e56 <lsm6dsl_read_xyz+0xc6>
    {
        // write x register
        i2c_transaction(0x6a, 0, dataX + i, 1);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	f107 021c 	add.w	r2, r7, #28
 8000de4:	441a      	add	r2, r3
 8000de6:	2301      	movs	r3, #1
 8000de8:	2100      	movs	r1, #0
 8000dea:	206a      	movs	r0, #106	@ 0x6a
 8000dec:	f7ff ff2c 	bl	8000c48 <i2c_transaction>
        // read value from x register
        i2c_transaction(0x6a, 1, dataX + i + 1, 1);
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	3301      	adds	r3, #1
 8000df4:	f107 021c 	add.w	r2, r7, #28
 8000df8:	441a      	add	r2, r3
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	206a      	movs	r0, #106	@ 0x6a
 8000e00:	f7ff ff22 	bl	8000c48 <i2c_transaction>

        // write y register
        i2c_transaction(0x6a, 0, dataY + i, 1);
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	f107 0218 	add.w	r2, r7, #24
 8000e0a:	441a      	add	r2, r3
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2100      	movs	r1, #0
 8000e10:	206a      	movs	r0, #106	@ 0x6a
 8000e12:	f7ff ff19 	bl	8000c48 <i2c_transaction>
        // read value from y register
        i2c_transaction(0x6a, 1, dataY + i + 1, 1);
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f107 0218 	add.w	r2, r7, #24
 8000e1e:	441a      	add	r2, r3
 8000e20:	2301      	movs	r3, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	206a      	movs	r0, #106	@ 0x6a
 8000e26:	f7ff ff0f 	bl	8000c48 <i2c_transaction>

        // write z register
        i2c_transaction(0x6a, 0, dataZ + i, 1);
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	f107 0214 	add.w	r2, r7, #20
 8000e30:	441a      	add	r2, r3
 8000e32:	2301      	movs	r3, #1
 8000e34:	2100      	movs	r1, #0
 8000e36:	206a      	movs	r0, #106	@ 0x6a
 8000e38:	f7ff ff06 	bl	8000c48 <i2c_transaction>
        // read value from z register
        i2c_transaction(0x6a, 1, dataZ + i + 1, 1);
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f107 0214 	add.w	r2, r7, #20
 8000e44:	441a      	add	r2, r3
 8000e46:	2301      	movs	r3, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	206a      	movs	r0, #106	@ 0x6a
 8000e4c:	f7ff fefc 	bl	8000c48 <i2c_transaction>
    for (int i = 0; i < 4; i = i + 2)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e52:	3302      	adds	r3, #2
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	ddc0      	ble.n	8000dde <lsm6dsl_read_xyz+0x4e>
    }

    // combine high and low bytes for x, y, z
    *x = (dataX[3] << 8) | dataX[1];
 8000e5c:	7ffb      	ldrb	r3, [r7, #31]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	7f7b      	ldrb	r3, [r7, #29]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	801a      	strh	r2, [r3, #0]
    *y = (dataY[3] << 8) | dataY[1];
 8000e6e:	7efb      	ldrb	r3, [r7, #27]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	7e7b      	ldrb	r3, [r7, #25]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	801a      	strh	r2, [r3, #0]
    *z = (dataZ[3] << 8) | dataZ[1];
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	7d7b      	ldrb	r3, [r7, #21]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	801a      	strh	r2, [r3, #0]
};
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	00290028 	.word	0x00290028
 8000ea0:	002b002a 	.word	0x002b002a
 8000ea4:	002d002c 	.word	0x002d002c

08000ea8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af02      	add	r7, sp, #8
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000eae:	f000 fc38 	bl	8001722 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8000eb2:	f000 f8c5 	bl	8001040 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000eb6:	f000 f947 	bl	8001148 <MX_GPIO_Init>
    MX_SPI3_Init();
 8000eba:	f000 f907 	bl	80010cc <MX_SPI3_Init>

    // RESET BLE MODULE
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec8:	f000 ff98 	bl	8001dfc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f000 fc9d 	bl	800180c <HAL_Delay>
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000edc:	f000 ff8e 	bl	8001dfc <HAL_GPIO_WritePin>

    // initialize all functions
    ble_init();
 8000ee0:	f7ff f9ce 	bl	8000280 <ble_init>
    timer_init(TIM2);
 8000ee4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ee8:	f000 fba6 	bl	8001638 <timer_init>
    i2c_init();
 8000eec:	f7ff fe38 	bl	8000b60 <i2c_init>
    lsm6dsl_init();
 8000ef0:	f7ff ff34 	bl	8000d5c <lsm6dsl_init>

    HAL_Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fc89 	bl	800180c <HAL_Delay>

    // start discoverablity at 0
    setDiscoverability(0);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fe0a 	bl	8000b14 <setDiscoverability>
    uint8_t nonDiscoverable = 1; // flag to check if the device is discoverable
 8000f00:	2301      	movs	r3, #1
 8000f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    while (1)
    {
        if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin))
 8000f06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d108      	bne.n	8000f20 <main+0x78>
 8000f0e:	2140      	movs	r1, #64	@ 0x40
 8000f10:	4840      	ldr	r0, [pc, #256]	@ (8001014 <main+0x16c>)
 8000f12:	f000 ff5b 	bl	8001dcc <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <main+0x78>
        {
            catchBLE();
 8000f1c:	f7ff fbc6 	bl	80006ac <catchBLE>
        }
        if (interrupt_flag) // check if the timer interrupt has occurred
 8000f20:	4b3d      	ldr	r3, [pc, #244]	@ (8001018 <main+0x170>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0ed      	beq.n	8000f06 <main+0x5e>
        {
            uint32_t catch_time = time;
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <main+0x174>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
            interrupt_flag = 0; // clear the interrupt flag
 8000f30:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <main+0x170>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
            check_movement();   // check for movement
 8000f36:	f000 f9a5 	bl	8001284 <check_movement>

            if (lost_mode) // check if the device is in lost mode
 8000f3a:	4b39      	ldr	r3, [pc, #228]	@ (8001020 <main+0x178>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05a      	beq.n	8000ffa <main+0x152>
            {
                if (nonDiscoverable) // check if the device is not discoverable
 8000f44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <main+0xb0>
                {
                    setDiscoverability(1); // set the device to discoverable
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fde1 	bl	8000b14 <setDiscoverability>
                    nonDiscoverable = 0;   // set the flag to 0
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                }
                //  Send a string to the NORDIC UART service, remember to not include the newline
                unsigned char test_str[20]; // buffer to store the string

                char time_str[10];                     // buffer to store the time
                int sec = (catch_time / SECONDS) - 60; // calculate the time in seconds
 8000f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5a:	4a32      	ldr	r2, [pc, #200]	@ (8001024 <main+0x17c>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	3b3c      	subs	r3, #60	@ 0x3c
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
                if (sec % 10 == 0 && catch_time % SECONDS == 0)
 8000f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f68:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <main+0x180>)
 8000f6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6e:	109a      	asrs	r2, r3, #2
 8000f70:	17cb      	asrs	r3, r1, #31
 8000f72:	1ad2      	subs	r2, r2, r3
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	1aca      	subs	r2, r1, r3
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	d1c1      	bne.n	8000f06 <main+0x5e>
 8000f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <main+0x17c>)
 8000f86:	fba3 2301 	umull	r2, r3, r3, r1
 8000f8a:	091a      	lsrs	r2, r3, #4
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	1aca      	subs	r2, r1, r3
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d1b5      	bne.n	8000f06 <main+0x5e>
                {
                    sprintf(time_str, "%d", sec);        // convert the time to a string
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9e:	4923      	ldr	r1, [pc, #140]	@ (800102c <main+0x184>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fbef 	bl	8003784 <siprintf>
                    strcpy((char *)test_str, "TURTLE "); // copy the string to the buffer
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <main+0x188>)
 8000fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb0:	e883 0003 	stmia.w	r3, {r0, r1}
                    strcat((char *)test_str, time_str);  // concatenate the time to the string
 8000fb4:	1d3a      	adds	r2, r7, #4
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fc09 	bl	80037d4 <strcat>
                    strcat((char *)test_str, " seconds");
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f902 	bl	80001d0 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4917      	ldr	r1, [pc, #92]	@ (8001034 <main+0x18c>)
 8000fd8:	461a      	mov	r2, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	cb03      	ldmia	r3!, {r0, r1}
 8000fde:	6010      	str	r0, [r2, #0]
 8000fe0:	6051      	str	r1, [r2, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	7213      	strb	r3, [r2, #8]

                    updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0,
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2313      	movs	r3, #19
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4911      	ldr	r1, [pc, #68]	@ (8001038 <main+0x190>)
 8000ff2:	4812      	ldr	r0, [pc, #72]	@ (800103c <main+0x194>)
 8000ff4:	f7ff fce2 	bl	80009bc <updateCharValue>
 8000ff8:	e785      	b.n	8000f06 <main+0x5e>
                                    sizeof(test_str) - 1, test_str);
                }
            }
            else if (!nonDiscoverable) // check if the device is not in lost mode
 8000ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d181      	bne.n	8000f06 <main+0x5e>
            {
                //				leds_set(0b00);
                disconnectBLE();       // disconnect the BLE
 8001002:	f7ff fd2f 	bl	8000a64 <disconnectBLE>
                setDiscoverability(0); // set the device to non discoverable
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff fd84 	bl	8000b14 <setDiscoverability>
                nonDiscoverable = 1;   // set the flag to 1
 800100c:	2301      	movs	r3, #1
 800100e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin))
 8001012:	e778      	b.n	8000f06 <main+0x5e>
 8001014:	48001000 	.word	0x48001000
 8001018:	20000351 	.word	0x20000351
 800101c:	2000034c 	.word	0x2000034c
 8001020:	20000350 	.word	0x20000350
 8001024:	cccccccd 	.word	0xcccccccd
 8001028:	66666667 	.word	0x66666667
 800102c:	08003fb0 	.word	0x08003fb0
 8001030:	08003fb4 	.word	0x08003fb4
 8001034:	08003fbc 	.word	0x08003fbc
 8001038:	200002dc 	.word	0x200002dc
 800103c:	200002d4 	.word	0x200002d4

08001040 <SystemClock_Config>:
 * @attention This changes the System clock frequency, make sure you reflect that change in your
 * timer
 * @retval None
 */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b096      	sub	sp, #88	@ 0x58
 8001044:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2244      	movs	r2, #68	@ 0x44
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fbb8 	bl	80037c4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f000 ff13 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8001070:	f000 f902 	bl	8001278 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001074:	2310      	movs	r3, #16
 8001076:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
    // This lines changes system clock frequency
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001080:	2370      	movs	r3, #112	@ 0x70
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4618      	mov	r0, r3
 800108e:	f000 ff55 	bl	8001f3c <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x5c>
    {
        Error_Handler();
 8001098:	f000 f8ee 	bl	8001278 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 800109c:	230f      	movs	r3, #15
 800109e:	603b      	str	r3, [r7, #0]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fb1d 	bl	80026f4 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x84>
    {
        Error_Handler();
 80010c0:	f000 f8da 	bl	8001278 <Error_Handler>
    }
}
 80010c4:	bf00      	nop
 80010c6:	3758      	adds	r7, #88	@ 0x58
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI3_Init 1 */

    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <MX_SPI3_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010dc:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010ea:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_SPI3_Init+0x74>)
 80010fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010fe:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_SPI3_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_SPI3_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_SPI3_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_SPI3_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi3.Init.CRCPolynomial = 7;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_SPI3_Init+0x74>)
 800111a:	2207      	movs	r2, #7
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_SPI3_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_SPI3_Init+0x74>)
 8001126:	2208      	movs	r2, #8
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_SPI3_Init+0x74>)
 800112c:	f001 fcce 	bl	8002acc <HAL_SPI_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_SPI3_Init+0x6e>
    {
        Error_Handler();
 8001136:	f000 f89f 	bl	8001278 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */

    /* USER CODE END SPI3_Init 2 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002e8 	.word	0x200002e8
 8001144:	40003c00 	.word	0x40003c00

08001148 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800115e:	4b43      	ldr	r3, [pc, #268]	@ (800126c <MX_GPIO_Init+0x124>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a42      	ldr	r2, [pc, #264]	@ (800126c <MX_GPIO_Init+0x124>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b40      	ldr	r3, [pc, #256]	@ (800126c <MX_GPIO_Init+0x124>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <MX_GPIO_Init+0x124>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a3c      	ldr	r2, [pc, #240]	@ (800126c <MX_GPIO_Init+0x124>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b3a      	ldr	r3, [pc, #232]	@ (800126c <MX_GPIO_Init+0x124>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <MX_GPIO_Init+0x124>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a36      	ldr	r2, [pc, #216]	@ (800126c <MX_GPIO_Init+0x124>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b34      	ldr	r3, [pc, #208]	@ (800126c <MX_GPIO_Init+0x124>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <MX_GPIO_Init+0x124>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a30      	ldr	r2, [pc, #192]	@ (800126c <MX_GPIO_Init+0x124>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <MX_GPIO_Init+0x124>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_GPIO_Init+0x124>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a2a      	ldr	r2, [pc, #168]	@ (800126c <MX_GPIO_Init+0x124>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_GPIO_Init+0x124>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011de:	f000 fe0d 	bl	8001dfc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e8:	4821      	ldr	r0, [pc, #132]	@ (8001270 <MX_GPIO_Init+0x128>)
 80011ea:	f000 fe07 	bl	8001dfc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f000 fe00 	bl	8001dfc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : BLE_INT_Pin */
    GPIO_InitStruct.Pin = BLE_INT_Pin;
 80011fc:	2340      	movs	r3, #64	@ 0x40
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4818      	ldr	r0, [pc, #96]	@ (8001274 <MX_GPIO_Init+0x12c>)
 8001212:	f000 fc31 	bl	8001a78 <HAL_GPIO_Init>

    /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
    GPIO_InitStruct.Pin = GPIO_LED1_Pin | BLE_RESET_Pin;
 8001216:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f000 fc21 	bl	8001a78 <HAL_GPIO_Init>

    /*Configure GPIO pin : BLE_CS_Pin */
    GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	@ (8001270 <MX_GPIO_Init+0x128>)
 8001250:	f000 fc12 	bl	8001a78 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2017      	movs	r0, #23
 800125a:	f000 fbd6 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800125e:	2017      	movs	r0, #23
 8001260:	f000 fbef 	bl	8001a42 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000

08001278 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <Error_Handler+0x8>

08001284 <check_movement>:
}
#endif /* USE_FULL_ASSERT */

// use the accelerometer output to check for movement
void check_movement()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
    static int16_t prev_x = 0, prev_y = 0, prev_z = 0; // previous accelerometer values
    int16_t x, y, z;

    lsm6dsl_read_xyz(&x, &y, &z); // Read the accelerometer values
 800128a:	1dba      	adds	r2, r7, #6
 800128c:	f107 0108 	add.w	r1, r7, #8
 8001290:	f107 030a 	add.w	r3, r7, #10
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fd7b 	bl	8000d90 <lsm6dsl_read_xyz>

    int deltaX = x - prev_x; // calculate the change in x
 800129a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <check_movement+0xc0>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    int deltaY = y - prev_y; // calculate the change in y
 80012aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <check_movement+0xc4>)
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	613b      	str	r3, [r7, #16]
    int deltaZ = z - prev_z; // calculate the change in z
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <check_movement+0xc8>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	60fb      	str	r3, [r7, #12]

    if ((abs(deltaX) > MOTION_THRESHOLD) || (abs(deltaY) > MOTION_THRESHOLD) ||
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bfb8      	it	lt
 80012d0:	425b      	neglt	r3, r3
 80012d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	dc0f      	bgt.n	80012fa <check_movement+0x76>
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	425b      	neglt	r3, r3
 80012e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	dc07      	bgt.n	80012fa <check_movement+0x76>
        (abs(deltaZ) > MOTION_THRESHOLD)) // check if the change in any of the axes is greater
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfb8      	it	lt
 80012f0:	425b      	neglt	r3, r3
    if ((abs(deltaX) > MOTION_THRESHOLD) || (abs(deltaY) > MOTION_THRESHOLD) ||
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	dd06      	ble.n	8001308 <check_movement+0x84>
                                          // than the threshold
    {
        time = 0;      // set the time the device has been still to 0
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <check_movement+0xcc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
        lost_mode = 0; // reset the lost mode flag
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <check_movement+0xd0>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e00c      	b.n	8001322 <check_movement+0x9e>
    }
    else
    {
        if (time >= LOST_TIME &&
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <check_movement+0xcc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001310:	d307      	bcc.n	8001322 <check_movement+0x9e>
            !lost_mode) // check if the device has been still for a certain amount of time
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <check_movement+0xd0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
        if (time >= LOST_TIME &&
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <check_movement+0x9e>
        {
            lost_mode = 1;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <check_movement+0xd0>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
        }
    }

    // update the previous values
    prev_x = x;
 8001322:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <check_movement+0xc0>)
 8001328:	801a      	strh	r2, [r3, #0]
    prev_y = y;
 800132a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <check_movement+0xc4>)
 8001330:	801a      	strh	r2, [r3, #0]
    prev_z = z;
 8001332:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001336:	4b05      	ldr	r3, [pc, #20]	@ (800134c <check_movement+0xc8>)
 8001338:	801a      	strh	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000352 	.word	0x20000352
 8001348:	20000354 	.word	0x20000354
 800134c:	20000356 	.word	0x20000356
 8001350:	2000034c 	.word	0x2000034c
 8001354:	20000350 	.word	0x20000350

08001358 <TIM2_IRQHandler>:

// timer interrupt handler
void TIM2_IRQHandler()
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // check if the update interrupt flag is set
 800135c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00f      	beq.n	800138a <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // clear the update interrupt flag
 800136a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6113      	str	r3, [r2, #16]
        time++;                  // increment the time the device has been still
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <TIM2_IRQHandler+0x3c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <TIM2_IRQHandler+0x3c>)
 8001382:	6013      	str	r3, [r2, #0]
        interrupt_flag = 1;
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <TIM2_IRQHandler+0x40>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
    }
};
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	2000034c 	.word	0x2000034c
 8001398:	20000351 	.word	0x20000351

0800139c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_MspInit+0x44>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_MspInit+0x44>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_MspInit+0x44>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_MspInit+0x44>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <HAL_MspInit+0x44>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_MspInit+0x44>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_SPI_MspInit+0x7c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d128      	bne.n	8001458 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <HAL_SPI_MspInit+0x80>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <HAL_SPI_MspInit+0x80>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001410:	6593      	str	r3, [r2, #88]	@ 0x58
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_SPI_MspInit+0x80>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_SPI_MspInit+0x80>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <HAL_SPI_MspInit+0x80>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HAL_SPI_MspInit+0x80>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001436:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001448:	2306      	movs	r3, #6
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <HAL_SPI_MspInit+0x84>)
 8001454:	f000 fb10 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	@ 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40003c00 	.word	0x40003c00
 8001464:	40021000 	.word	0x40021000
 8001468:	48000800 	.word	0x48000800

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 f983 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <EXTI9_5_IRQHandler+0x14>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80014d6:	2040      	movs	r0, #64	@ 0x40
 80014d8:	f000 fca8 	bl	8001e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200002e4 	.word	0x200002e4

080014e4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <_sbrk+0x50>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x16>
		heap_end = &end;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <_sbrk+0x50>)
 80014f6:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <_sbrk+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <_sbrk+0x50>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <_sbrk+0x50>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	466a      	mov	r2, sp
 800150a:	4293      	cmp	r3, r2
 800150c:	d907      	bls.n	800151e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800150e:	f002 f981 	bl	8003814 <__errno>
 8001512:	4603      	mov	r3, r0
 8001514:	220c      	movs	r2, #12
 8001516:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	e006      	b.n	800152c <_sbrk+0x48>
	}

	heap_end += incr;
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <_sbrk+0x50>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a03      	ldr	r2, [pc, #12]	@ (8001534 <_sbrk+0x50>)
 8001528:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000358 	.word	0x20000358
 8001538:	200004a8 	.word	0x200004a8

0800153c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <SystemInit+0x64>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a16      	ldr	r2, [pc, #88]	@ (80015a0 <SystemInit+0x64>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <SystemInit+0x68>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <SystemInit+0x68>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <SystemInit+0x68>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <SystemInit+0x68>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <SystemInit+0x68>)
 8001568:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800156c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001570:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <SystemInit+0x68>)
 8001574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001578:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <SystemInit+0x68>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <SystemInit+0x68>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001584:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <SystemInit+0x68>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SystemInit+0x64>)
 800158e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001592:	609a      	str	r2, [r3, #8]
#endif
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	40021000 	.word	0x40021000

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	@ (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <timer_init>:
 */

 #include "timer.h"

 void timer_init(TIM_TypeDef *timer)
 {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
     // enable on rcc
     RCC->APB1ENR1 |= RCC_APB1SMENR1_TIM2SMEN;
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <timer_init+0x94>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <timer_init+0x94>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6593      	str	r3, [r2, #88]	@ 0x58
 
     // disables the timer
     timer->CR1 &= ~TIM_CR1_CEN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 0201 	bic.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	601a      	str	r2, [r3, #0]
 
     // clear counter
     timer->CNT &= ~TIM_CNT_CNT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
 
     // clear auto-reload register
     timer->ARR &= ~TIM_ARR_ARR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c
 
     // clear prescalar
     timer->PSC &= ~TIM_PSC_PSC;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	041b      	lsls	r3, r3, #16
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6293      	str	r3, [r2, #40]	@ 0x28
 
     // clear uif flag
     timer->SR &= ~TIM_SR_UIF;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f023 0201 	bic.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
 
     // disable interrupts
     timer->DIER &= ~TIM_DIER_UIE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f023 0201 	bic.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]
 
     // set prescalar so that unit is ms
     timer->PSC = 8000 - 1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28
 
     // set auto-reload register so that the timer will go off every 50ms
     timer->ARR = 50 - 1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2231      	movs	r2, #49	@ 0x31
 800169c:	62da      	str	r2, [r3, #44]	@ 0x2c
 
     // enable update interrupt
     timer->DIER |= TIM_DIER_UIE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60da      	str	r2, [r3, #12]
 
     // enable in nvic
     NVIC_EnableIRQ(TIM2_IRQn);
 80016aa:	201c      	movs	r0, #28
 80016ac:	f7ff ff7c 	bl	80015a8 <__NVIC_EnableIRQ>
 
     // set priority
     NVIC_SetPriority(TIM2_IRQn, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	201c      	movs	r0, #28
 80016b4:	f7ff ff96 	bl	80015e4 <__NVIC_SetPriority>
 
     // enable the timer
     timer->CR1 |= TIM_CR1_CEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	601a      	str	r2, [r3, #0]
 }
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d4:	f7ff ff32 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <LoopForever+0x6>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <LoopForever+0xe>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <LoopForever+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f002 f88f 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001702:	f7ff fbd1 	bl	8000ea8 <main>

08001706 <LoopForever>:

LoopForever:
    b LoopForever
 8001706:	e7fe      	b.n	8001706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001708:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8001714:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 8001718:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 800171c:	200004a8 	.word	0x200004a8

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>

08001722 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f961 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f80e 	bl	8001754 <HAL_InitTick>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	e001      	b.n	8001748 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001744:	f7ff fe2a 	bl	800139c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001748:	79fb      	ldrb	r3, [r7, #7]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d023      	beq.n	80017b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001768:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <HAL_InitTick+0x70>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <HAL_InitTick+0x6c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f96d 	bl	8001a5e <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10f      	bne.n	80017aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d809      	bhi.n	80017a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f937 	bl	8001a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_InitTick+0x74>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e004      	b.n	80017b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e001      	b.n	80017b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000158 	.word	0x20000158
 80017c4:	20000150 	.word	0x20000150
 80017c8:	20000154 	.word	0x20000154

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000158 	.word	0x20000158
 80017f0:	2000035c 	.word	0x2000035c

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000035c 	.word	0x2000035c

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <HAL_Delay+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000158 	.word	0x20000158

08001854 <__NVIC_SetPriorityGrouping>:
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e17f      	b.n	8001d88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8171 	beq.w	8001d82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d005      	beq.n	8001ab8 <HAL_GPIO_Init+0x40>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d130      	bne.n	8001b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aee:	2201      	movs	r2, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0201 	and.w	r2, r3, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d118      	bne.n	8001b58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	6939      	ldr	r1, [r7, #16]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80ac 	beq.w	8001d82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001da8 <HAL_GPIO_Init+0x330>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2e:	4a5e      	ldr	r2, [pc, #376]	@ (8001da8 <HAL_GPIO_Init+0x330>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c36:	4b5c      	ldr	r3, [pc, #368]	@ (8001da8 <HAL_GPIO_Init+0x330>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c42:	4a5a      	ldr	r2, [pc, #360]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x242>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4f      	ldr	r2, [pc, #316]	@ (8001db0 <HAL_GPIO_Init+0x338>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x23e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4e      	ldr	r2, [pc, #312]	@ (8001db4 <HAL_GPIO_Init+0x33c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x23a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4d      	ldr	r2, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x340>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x236>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	@ (8001dbc <HAL_GPIO_Init+0x344>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x232>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <HAL_GPIO_Init+0x348>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x22e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc4 <HAL_GPIO_Init+0x34c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x22a>
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	e00c      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e00a      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x244>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	f002 0203 	and.w	r2, r2, #3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ccc:	4937      	ldr	r1, [pc, #220]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cfe:	4a32      	ldr	r2, [pc, #200]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d04:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d28:	4a27      	ldr	r2, [pc, #156]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d2e:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d52:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d7c:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f47f ae78 	bne.w	8001a88 <HAL_GPIO_Init+0x10>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000c00 	.word	0x48000c00
 8001dbc:	48001000 	.word	0x48001000
 8001dc0:	48001400 	.word	0x48001400
 8001dc4:	48001800 	.word	0x48001800
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e42:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f806 	bl	8001e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e9e:	d130      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d038      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2232      	movs	r2, #50	@ 0x32
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed4:	e002      	b.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f2      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efc:	d110      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e00f      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d007      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f10:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f18:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000
 8001f34:	20000150 	.word	0x20000150
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e3ca      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4e:	4b97      	ldr	r3, [pc, #604]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f58:	4b94      	ldr	r3, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80e4 	beq.w	8002138 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_RCC_OscConfig+0x4a>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	f040 808b 	bne.w	8002094 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f040 8087 	bne.w	8002094 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f86:	4b89      	ldr	r3, [pc, #548]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x62>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e3a2      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4b82      	ldr	r3, [pc, #520]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x7c>
 8001fae:	4b7f      	ldr	r3, [pc, #508]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb6:	e005      	b.n	8001fc4 <HAL_RCC_OscConfig+0x88>
 8001fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d223      	bcs.n	8002010 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fd1d 	bl	8002a0c <RCC_SetFlashLatencyFromMSIRange>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e383      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fdc:	4b73      	ldr	r3, [pc, #460]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a72      	ldr	r2, [pc, #456]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	496d      	ldr	r1, [pc, #436]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	4968      	ldr	r1, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
 800200e:	e025      	b.n	800205c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002010:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a65      	ldr	r2, [pc, #404]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4960      	ldr	r1, [pc, #384]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202e:	4b5f      	ldr	r3, [pc, #380]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	495b      	ldr	r1, [pc, #364]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fcdd 	bl	8002a0c <RCC_SetFlashLatencyFromMSIRange>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e343      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205c:	f000 fc4a 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	4950      	ldr	r1, [pc, #320]	@ (80021b0 <HAL_RCC_OscConfig+0x274>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	4a4e      	ldr	r2, [pc, #312]	@ (80021b4 <HAL_RCC_OscConfig+0x278>)
 800207a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800207c:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <HAL_RCC_OscConfig+0x27c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fb67 	bl	8001754 <HAL_InitTick>
 8002086:	4603      	mov	r3, r0
 8002088:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d052      	beq.n	8002136 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	e327      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d032      	beq.n	8002102 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800209c:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fba4 	bl	80017f4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b0:	f7ff fba0 	bl	80017f4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e310      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c2:	4b3a      	ldr	r3, [pc, #232]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ce:	4b37      	ldr	r3, [pc, #220]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4931      	ldr	r1, [pc, #196]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ec:	4b2f      	ldr	r3, [pc, #188]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	492c      	ldr	r1, [pc, #176]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	e01a      	b.n	8002138 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002102:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a29      	ldr	r2, [pc, #164]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800210e:	f7ff fb71 	bl	80017f4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002116:	f7ff fb6d 	bl	80017f4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e2dd      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x1da>
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002136:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d074      	beq.n	800222e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b08      	cmp	r3, #8
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x21a>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d10e      	bne.n	800216e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d10b      	bne.n	800216e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d064      	beq.n	800222c <HAL_RCC_OscConfig+0x2f0>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d160      	bne.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e2ba      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x24a>
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800217e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	e026      	b.n	80021d4 <HAL_RCC_OscConfig+0x298>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800218e:	d115      	bne.n	80021bc <HAL_RCC_OscConfig+0x280>
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 8002196:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a02      	ldr	r2, [pc, #8]	@ (80021ac <HAL_RCC_OscConfig+0x270>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x298>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08003fc8 	.word	0x08003fc8
 80021b4:	20000150 	.word	0x20000150
 80021b8:	20000154 	.word	0x20000154
 80021bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff fb0a 	bl	80017f4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fb06 	bl	80017f4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e276      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2a8>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff faf6 	bl	80017f4 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff faf2 	bl	80017f4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e262      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221e:	4b88      	ldr	r3, [pc, #544]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x2d0>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d060      	beq.n	80022fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d005      	beq.n	800224c <HAL_RCC_OscConfig+0x310>
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d119      	bne.n	800227a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d116      	bne.n	800227a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224c:	4b7c      	ldr	r3, [pc, #496]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x328>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e23f      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	4973      	ldr	r1, [pc, #460]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002278:	e040      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff fab1 	bl	80017f4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff faad 	bl	80017f4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e21d      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a8:	4b65      	ldr	r3, [pc, #404]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b62      	ldr	r3, [pc, #392]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	495f      	ldr	r1, [pc, #380]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff fa8d 	bl	80017f4 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff fa89 	bl	80017f4 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1f9      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f0:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d03c      	beq.n	8002382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002310:	4b4b      	ldr	r3, [pc, #300]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002316:	4a4a      	ldr	r2, [pc, #296]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7ff fa68 	bl	80017f4 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fa64 	bl	80017f4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1d4      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCC_OscConfig+0x3ec>
 8002348:	e01b      	b.n	8002382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b3d      	ldr	r3, [pc, #244]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002350:	4a3b      	ldr	r2, [pc, #236]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7ff fa4b 	bl	80017f4 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002362:	f7ff fa47 	bl	80017f4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1b7      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002374:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ef      	bne.n	8002362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80a6 	beq.w	80024dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	4a26      	ldr	r2, [pc, #152]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d118      	bne.n	80023fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7ff fa0e 	bl	80017f4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7ff fa0a 	bl	80017f4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e17a      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_RCC_OscConfig+0x508>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x4d8>
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002412:	e029      	b.n	8002468 <HAL_RCC_OscConfig+0x52c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d115      	bne.n	8002448 <HAL_RCC_OscConfig+0x50c>
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242c:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	4a03      	ldr	r2, [pc, #12]	@ (8002440 <HAL_RCC_OscConfig+0x504>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800243c:	e014      	b.n	8002468 <HAL_RCC_OscConfig+0x52c>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	4b9c      	ldr	r3, [pc, #624]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	4a9b      	ldr	r2, [pc, #620]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002458:	4b98      	ldr	r3, [pc, #608]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	4a97      	ldr	r2, [pc, #604]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d016      	beq.n	800249e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7ff f9c0 	bl	80017f4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7ff f9bc 	bl	80017f4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e12a      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248e:	4b8b      	ldr	r3, [pc, #556]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ed      	beq.n	8002478 <HAL_RCC_OscConfig+0x53c>
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff f9a9 	bl	80017f4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff f9a5 	bl	80017f4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e113      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024bc:	4b7f      	ldr	r3, [pc, #508]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ed      	bne.n	80024a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d0:	4b7a      	ldr	r3, [pc, #488]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	4a79      	ldr	r2, [pc, #484]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80024d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80fe 	beq.w	80026e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 80d0 	bne.w	8002690 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024f0:	4b72      	ldr	r3, [pc, #456]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	429a      	cmp	r2, r3
 8002502:	d130      	bne.n	8002566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	3b01      	subs	r3, #1
 8002510:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d127      	bne.n	8002566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002520:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d11f      	bne.n	8002566 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002530:	2a07      	cmp	r2, #7
 8002532:	bf14      	ite	ne
 8002534:	2201      	movne	r2, #1
 8002536:	2200      	moveq	r2, #0
 8002538:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800253a:	4293      	cmp	r3, r2
 800253c:	d113      	bne.n	8002566 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d109      	bne.n	8002566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d06e      	beq.n	8002644 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d069      	beq.n	8002640 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800256c:	4b53      	ldr	r3, [pc, #332]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002578:	4b50      	ldr	r3, [pc, #320]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0ad      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002588:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a4b      	ldr	r2, [pc, #300]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800258e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002592:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002594:	f7ff f92e 	bl	80017f4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f92a 	bl	80017f4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e09a      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ae:	4b43      	ldr	r3, [pc, #268]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ba:	4b40      	ldr	r3, [pc, #256]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b40      	ldr	r3, [pc, #256]	@ (80026c0 <HAL_RCC_OscConfig+0x784>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025ca:	3a01      	subs	r2, #1
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025d4:	0212      	lsls	r2, r2, #8
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025dc:	0852      	lsrs	r2, r2, #1
 80025de:	3a01      	subs	r2, #1
 80025e0:	0552      	lsls	r2, r2, #21
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025e8:	0852      	lsrs	r2, r2, #1
 80025ea:	3a01      	subs	r2, #1
 80025ec:	0652      	lsls	r2, r2, #25
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025f4:	0912      	lsrs	r2, r2, #4
 80025f6:	0452      	lsls	r2, r2, #17
 80025f8:	430a      	orrs	r2, r1
 80025fa:	4930      	ldr	r1, [pc, #192]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002600:	4b2e      	ldr	r3, [pc, #184]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2d      	ldr	r2, [pc, #180]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800260c:	4b2b      	ldr	r3, [pc, #172]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a2a      	ldr	r2, [pc, #168]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002618:	f7ff f8ec 	bl	80017f4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f8e8 	bl	80017f4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e058      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263e:	e050      	b.n	80026e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e04f      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d148      	bne.n	80026e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a19      	ldr	r2, [pc, #100]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800265c:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002668:	f7ff f8c4 	bl	80017f4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff f8c0 	bl	80017f4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e030      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x734>
 800268e:	e028      	b.n	80026e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d023      	beq.n	80026de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <HAL_RCC_OscConfig+0x780>)
 800269c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff f8a7 	bl	80017f4 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	e00c      	b.n	80026c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7ff f8a3 	bl	80017f4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d905      	bls.n	80026c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_OscConfig+0x7b0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ec      	bne.n	80026aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_OscConfig+0x7b0>)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	4905      	ldr	r1, [pc, #20]	@ (80026ec <HAL_RCC_OscConfig+0x7b0>)
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_RCC_OscConfig+0x7b4>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60cb      	str	r3, [r1, #12]
 80026dc:	e001      	b.n	80026e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	feeefffc 	.word	0xfeeefffc

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0e7      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b75      	ldr	r3, [pc, #468]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d910      	bls.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b72      	ldr	r3, [pc, #456]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4970      	ldr	r1, [pc, #448]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b6e      	ldr	r3, [pc, #440]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0cf      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b66      	ldr	r3, [pc, #408]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002750:	429a      	cmp	r2, r3
 8002752:	d908      	bls.n	8002766 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b63      	ldr	r3, [pc, #396]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4960      	ldr	r1, [pc, #384]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d04c      	beq.n	800280c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	4b5a      	ldr	r3, [pc, #360]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d121      	bne.n	80027ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0a6      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002792:	4b54      	ldr	r3, [pc, #336]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d115      	bne.n	80027ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e09a      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027aa:	4b4e      	ldr	r3, [pc, #312]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e08e      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ba:	4b4a      	ldr	r3, [pc, #296]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e086      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ca:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f023 0203 	bic.w	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4943      	ldr	r1, [pc, #268]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027dc:	f7ff f80a 	bl	80017f4 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7ff f806 	bl	80017f4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e06e      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 020c 	and.w	r2, r3, #12
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	429a      	cmp	r2, r3
 800280a:	d1eb      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	492b      	ldr	r1, [pc, #172]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283a:	4b29      	ldr	r3, [pc, #164]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d210      	bcs.n	800286a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 0207 	bic.w	r2, r3, #7
 8002850:	4923      	ldr	r1, [pc, #140]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002858:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_RCC_ClockConfig+0x1ec>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e036      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002876:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4918      	ldr	r1, [pc, #96]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002894:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4910      	ldr	r1, [pc, #64]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a8:	f000 f824 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	490b      	ldr	r1, [pc, #44]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f4>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <HAL_RCC_ClockConfig+0x1f8>)
 80028c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_RCC_ClockConfig+0x1fc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe ff41 	bl	8001754 <HAL_InitTick>
 80028d2:	4603      	mov	r3, r0
 80028d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028d6:	7afb      	ldrb	r3, [r7, #11]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08003fc8 	.word	0x08003fc8
 80028ec:	20000150 	.word	0x20000150
 80028f0:	20000154 	.word	0x20000154

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002902:	4b3e      	ldr	r3, [pc, #248]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800290c:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x34>
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d121      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d11e      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002928:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002934:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e005      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002950:	4a2b      	ldr	r2, [pc, #172]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002958:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002964:	e00a      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d102      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	e004      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d101      	bne.n	800297c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002978:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x114>)
 800297a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d134      	bne.n	80029ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0xa6>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d003      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002998:	e005      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800299a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800299c:	617b      	str	r3, [r7, #20]
      break;
 800299e:	e005      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x114>)
 80029a2:	617b      	str	r3, [r7, #20]
      break;
 80029a4:	e002      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	617b      	str	r3, [r7, #20]
      break;
 80029aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	3301      	adds	r3, #1
 80029b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	fb03 f202 	mul.w	r2, r3, r2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x108>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	0e5b      	lsrs	r3, r3, #25
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	3301      	adds	r3, #1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029ec:	69bb      	ldr	r3, [r7, #24]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08003fd8 	.word	0x08003fd8
 8002a04:	00f42400 	.word	0x00f42400
 8002a08:	007a1200 	.word	0x007a1200

08002a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a24:	f7ff fa26 	bl	8001e74 <HAL_PWREx_GetVoltageRange>
 8002a28:	6178      	str	r0, [r7, #20]
 8002a2a:	e014      	b.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	4a24      	ldr	r2, [pc, #144]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a38:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a44:	f7ff fa16 	bl	8001e74 <HAL_PWREx_GetVoltageRange>
 8002a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5c:	d10b      	bne.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	@ 0x80
 8002a62:	d919      	bls.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a68:	d902      	bls.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e013      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	e010      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b80      	cmp	r3, #128	@ 0x80
 8002a7a:	d902      	bls.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e00a      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b80      	cmp	r3, #128	@ 0x80
 8002a86:	d102      	bne.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a88:	2302      	movs	r3, #2
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	e004      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b70      	cmp	r3, #112	@ 0x70
 8002a92:	d101      	bne.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 0207 	bic.w	r2, r3, #7
 8002aa0:	4909      	ldr	r1, [pc, #36]	@ (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002aa8:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e095      	b.n	8002c0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aee:	d009      	beq.n	8002b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fc60 	bl	80013e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b44:	d902      	bls.n	8002b4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e002      	b.n	8002b52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b5a:	d007      	beq.n	8002b6c <HAL_SPI_Init+0xa0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b64:	d002      	beq.n	8002b6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	ea42 0103 	orr.w	r1, r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	f003 0204 	and.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002be8:	ea42 0103 	orr.w	r1, r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b088      	sub	sp, #32
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_SPI_Transmit+0x22>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e15f      	b.n	8002ef4 <HAL_SPI_Transmit+0x2e2>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3c:	f7fe fdda 	bl	80017f4 <HAL_GetTick>
 8002c40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c56:	e148      	b.n	8002eea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_SPI_Transmit+0x52>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c68:	e13f      	b.n	8002eea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d007      	beq.n	8002cf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cfc:	d94f      	bls.n	8002d9e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_SPI_Transmit+0xfa>
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d142      	bne.n	8002d92 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d30:	e02f      	b.n	8002d92 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d112      	bne.n	8002d66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	881a      	ldrh	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d64:	e015      	b.n	8002d92 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d66:	f7fe fd45 	bl	80017f4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d803      	bhi.n	8002d7e <HAL_SPI_Transmit+0x16c>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d102      	bne.n	8002d84 <HAL_SPI_Transmit+0x172>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d90:	e0ab      	b.n	8002eea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ca      	bne.n	8002d32 <HAL_SPI_Transmit+0x120>
 8002d9c:	e080      	b.n	8002ea0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0x19a>
 8002da6:	8afb      	ldrh	r3, [r7, #22]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d174      	bne.n	8002e96 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d912      	bls.n	8002ddc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	881a      	ldrh	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	1c9a      	adds	r2, r3, #2
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b02      	subs	r3, #2
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dda:	e05c      	b.n	8002e96 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e02:	e048      	b.n	8002e96 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d12b      	bne.n	8002e6a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d912      	bls.n	8002e42 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b02      	subs	r3, #2
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e40:	e029      	b.n	8002e96 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e68:	e015      	b.n	8002e96 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6a:	f7fe fcc3 	bl	80017f4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d803      	bhi.n	8002e82 <HAL_SPI_Transmit+0x270>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d102      	bne.n	8002e88 <HAL_SPI_Transmit+0x276>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e94:	e029      	b.n	8002eea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1b1      	bne.n	8002e04 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fb69 	bl	800357c <SPI_EndRxTxTransaction>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e003      	b.n	8002eea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x26>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e20a      	b.n	8003338 <HAL_SPI_TransmitReceive+0x43c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f2a:	f7fe fc63 	bl	80017f4 <HAL_GetTick>
 8002f2e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f36:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f46:	7efb      	ldrb	r3, [r7, #27]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d00e      	beq.n	8002f6a <HAL_SPI_TransmitReceive+0x6e>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f52:	d106      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x66>
 8002f5c:	7efb      	ldrb	r3, [r7, #27]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002f68:	e1e0      	b.n	800332c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x80>
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002f82:	e1d3      	b.n	800332c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2205      	movs	r2, #5
 8002f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	887a      	ldrh	r2, [r7, #2]
 8002fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fda:	d802      	bhi.n	8002fe2 <HAL_SPI_TransmitReceive+0xe6>
 8002fdc:	8a3b      	ldrh	r3, [r7, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d908      	bls.n	8002ff4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	e007      	b.n	8003004 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003002:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d007      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800302a:	f240 8081 	bls.w	8003130 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_SPI_TransmitReceive+0x140>
 8003036:	8a7b      	ldrh	r3, [r7, #18]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d16d      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	1c9a      	adds	r2, r3, #2
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003060:	e05a      	b.n	8003118 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11b      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x1ac>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0x1ac>
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	2b01      	cmp	r3, #1
 800307e:	d113      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	1c9a      	adds	r2, r3, #2
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d11c      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x1f4>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	b292      	uxth	r2, r2
 80030ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030f0:	f7fe fb80 	bl	80017f4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d80b      	bhi.n	8003118 <HAL_SPI_TransmitReceive+0x21c>
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d007      	beq.n	8003118 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003116:	e109      	b.n	800332c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d19f      	bne.n	8003062 <HAL_SPI_TransmitReceive+0x166>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d199      	bne.n	8003062 <HAL_SPI_TransmitReceive+0x166>
 800312e:	e0e3      	b.n	80032f8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x244>
 8003138:	8a7b      	ldrh	r3, [r7, #18]
 800313a:	2b01      	cmp	r3, #1
 800313c:	f040 80cf 	bne.w	80032de <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d912      	bls.n	8003170 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314e:	881a      	ldrh	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315a:	1c9a      	adds	r2, r3, #2
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b02      	subs	r3, #2
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800316e:	e0b6      	b.n	80032de <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003196:	e0a2      	b.n	80032de <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d134      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x314>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d02f      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x314>
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d12c      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d912      	bls.n	80031e6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b02      	subs	r3, #2
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031e4:	e012      	b.n	800320c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d148      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x3b4>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d042      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d923      	bls.n	800327e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	b292      	uxth	r2, r2
 8003242:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	1c9a      	adds	r2, r3, #2
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b02      	subs	r3, #2
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d81f      	bhi.n	80032ac <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	e016      	b.n	80032ac <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f103 020c 	add.w	r2, r3, #12
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ac:	2301      	movs	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032b0:	f7fe faa0 	bl	80017f4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032bc:	429a      	cmp	r2, r3
 80032be:	d803      	bhi.n	80032c8 <HAL_SPI_TransmitReceive+0x3cc>
 80032c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d102      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x3d2>
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80032dc:	e026      	b.n	800332c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f af57 	bne.w	8003198 <HAL_SPI_TransmitReceive+0x29c>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f47f af50 	bne.w	8003198 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f93d 	bl	800357c <SPI_EndRxTxTransaction>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003322:	e003      	b.n	800332c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003338:	4618      	mov	r0, r3
 800333a:	3728      	adds	r7, #40	@ 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003350:	f7fe fa50 	bl	80017f4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	4413      	add	r3, r2
 800335e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003360:	f7fe fa48 	bl	80017f4 <HAL_GetTick>
 8003364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	0d1b      	lsrs	r3, r3, #20
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	e054      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d050      	beq.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003380:	f7fe fa38 	bl	80017f4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	429a      	cmp	r2, r3
 800338e:	d902      	bls.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13d      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ae:	d111      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	d004      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d107      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033dc:	d10f      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e017      	b.n	8003442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3b01      	subs	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d19b      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000150 	.word	0x20000150

08003450 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003462:	f7fe f9c7 	bl	80017f4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	4413      	add	r3, r2
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003472:	f7fe f9bf 	bl	80017f4 <HAL_GetTick>
 8003476:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003480:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00da      	lsls	r2, r3, #3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	0d1b      	lsrs	r3, r3, #20
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003498:	e060      	b.n	800355c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80034a0:	d107      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d050      	beq.n	800355c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034ba:	f7fe f99b 	bl	80017f4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d902      	bls.n	80034d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d13d      	bne.n	800354c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034e8:	d111      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f2:	d004      	beq.n	80034fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fc:	d107      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800350c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003516:	d10f      	bne.n	8003538 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003536:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e010      	b.n	800356e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	3b01      	subs	r3, #1
 800355a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d196      	bne.n	800349a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3728      	adds	r7, #40	@ 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000150 	.word	0x20000150

0800357c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff ff5b 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e027      	b.n	8003600 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff fec0 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e014      	b.n	8003600 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff ff34 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e000      	b.n	8003600 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <malloc>:
 8003608:	4b02      	ldr	r3, [pc, #8]	@ (8003614 <malloc+0xc>)
 800360a:	4601      	mov	r1, r0
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f000 b82d 	b.w	800366c <_malloc_r>
 8003612:	bf00      	nop
 8003614:	2000015c 	.word	0x2000015c

08003618 <free>:
 8003618:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <free+0xc>)
 800361a:	4601      	mov	r1, r0
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	f000 b933 	b.w	8003888 <_free_r>
 8003622:	bf00      	nop
 8003624:	2000015c 	.word	0x2000015c

08003628 <sbrk_aligned>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4e0f      	ldr	r6, [pc, #60]	@ (8003668 <sbrk_aligned+0x40>)
 800362c:	460c      	mov	r4, r1
 800362e:	6831      	ldr	r1, [r6, #0]
 8003630:	4605      	mov	r5, r0
 8003632:	b911      	cbnz	r1, 800363a <sbrk_aligned+0x12>
 8003634:	f000 f8de 	bl	80037f4 <_sbrk_r>
 8003638:	6030      	str	r0, [r6, #0]
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f000 f8d9 	bl	80037f4 <_sbrk_r>
 8003642:	1c43      	adds	r3, r0, #1
 8003644:	d103      	bne.n	800364e <sbrk_aligned+0x26>
 8003646:	f04f 34ff 	mov.w	r4, #4294967295
 800364a:	4620      	mov	r0, r4
 800364c:	bd70      	pop	{r4, r5, r6, pc}
 800364e:	1cc4      	adds	r4, r0, #3
 8003650:	f024 0403 	bic.w	r4, r4, #3
 8003654:	42a0      	cmp	r0, r4
 8003656:	d0f8      	beq.n	800364a <sbrk_aligned+0x22>
 8003658:	1a21      	subs	r1, r4, r0
 800365a:	4628      	mov	r0, r5
 800365c:	f000 f8ca 	bl	80037f4 <_sbrk_r>
 8003660:	3001      	adds	r0, #1
 8003662:	d1f2      	bne.n	800364a <sbrk_aligned+0x22>
 8003664:	e7ef      	b.n	8003646 <sbrk_aligned+0x1e>
 8003666:	bf00      	nop
 8003668:	20000360 	.word	0x20000360

0800366c <_malloc_r>:
 800366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003670:	1ccd      	adds	r5, r1, #3
 8003672:	f025 0503 	bic.w	r5, r5, #3
 8003676:	3508      	adds	r5, #8
 8003678:	2d0c      	cmp	r5, #12
 800367a:	bf38      	it	cc
 800367c:	250c      	movcc	r5, #12
 800367e:	2d00      	cmp	r5, #0
 8003680:	4606      	mov	r6, r0
 8003682:	db01      	blt.n	8003688 <_malloc_r+0x1c>
 8003684:	42a9      	cmp	r1, r5
 8003686:	d904      	bls.n	8003692 <_malloc_r+0x26>
 8003688:	230c      	movs	r3, #12
 800368a:	6033      	str	r3, [r6, #0]
 800368c:	2000      	movs	r0, #0
 800368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003768 <_malloc_r+0xfc>
 8003696:	f000 f869 	bl	800376c <__malloc_lock>
 800369a:	f8d8 3000 	ldr.w	r3, [r8]
 800369e:	461c      	mov	r4, r3
 80036a0:	bb44      	cbnz	r4, 80036f4 <_malloc_r+0x88>
 80036a2:	4629      	mov	r1, r5
 80036a4:	4630      	mov	r0, r6
 80036a6:	f7ff ffbf 	bl	8003628 <sbrk_aligned>
 80036aa:	1c43      	adds	r3, r0, #1
 80036ac:	4604      	mov	r4, r0
 80036ae:	d158      	bne.n	8003762 <_malloc_r+0xf6>
 80036b0:	f8d8 4000 	ldr.w	r4, [r8]
 80036b4:	4627      	mov	r7, r4
 80036b6:	2f00      	cmp	r7, #0
 80036b8:	d143      	bne.n	8003742 <_malloc_r+0xd6>
 80036ba:	2c00      	cmp	r4, #0
 80036bc:	d04b      	beq.n	8003756 <_malloc_r+0xea>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	4639      	mov	r1, r7
 80036c2:	4630      	mov	r0, r6
 80036c4:	eb04 0903 	add.w	r9, r4, r3
 80036c8:	f000 f894 	bl	80037f4 <_sbrk_r>
 80036cc:	4581      	cmp	r9, r0
 80036ce:	d142      	bne.n	8003756 <_malloc_r+0xea>
 80036d0:	6821      	ldr	r1, [r4, #0]
 80036d2:	1a6d      	subs	r5, r5, r1
 80036d4:	4629      	mov	r1, r5
 80036d6:	4630      	mov	r0, r6
 80036d8:	f7ff ffa6 	bl	8003628 <sbrk_aligned>
 80036dc:	3001      	adds	r0, #1
 80036de:	d03a      	beq.n	8003756 <_malloc_r+0xea>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	442b      	add	r3, r5
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	f8d8 3000 	ldr.w	r3, [r8]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	bb62      	cbnz	r2, 8003748 <_malloc_r+0xdc>
 80036ee:	f8c8 7000 	str.w	r7, [r8]
 80036f2:	e00f      	b.n	8003714 <_malloc_r+0xa8>
 80036f4:	6822      	ldr	r2, [r4, #0]
 80036f6:	1b52      	subs	r2, r2, r5
 80036f8:	d420      	bmi.n	800373c <_malloc_r+0xd0>
 80036fa:	2a0b      	cmp	r2, #11
 80036fc:	d917      	bls.n	800372e <_malloc_r+0xc2>
 80036fe:	1961      	adds	r1, r4, r5
 8003700:	42a3      	cmp	r3, r4
 8003702:	6025      	str	r5, [r4, #0]
 8003704:	bf18      	it	ne
 8003706:	6059      	strne	r1, [r3, #4]
 8003708:	6863      	ldr	r3, [r4, #4]
 800370a:	bf08      	it	eq
 800370c:	f8c8 1000 	streq.w	r1, [r8]
 8003710:	5162      	str	r2, [r4, r5]
 8003712:	604b      	str	r3, [r1, #4]
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f82f 	bl	8003778 <__malloc_unlock>
 800371a:	f104 000b 	add.w	r0, r4, #11
 800371e:	1d23      	adds	r3, r4, #4
 8003720:	f020 0007 	bic.w	r0, r0, #7
 8003724:	1ac2      	subs	r2, r0, r3
 8003726:	bf1c      	itt	ne
 8003728:	1a1b      	subne	r3, r3, r0
 800372a:	50a3      	strne	r3, [r4, r2]
 800372c:	e7af      	b.n	800368e <_malloc_r+0x22>
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	42a3      	cmp	r3, r4
 8003732:	bf0c      	ite	eq
 8003734:	f8c8 2000 	streq.w	r2, [r8]
 8003738:	605a      	strne	r2, [r3, #4]
 800373a:	e7eb      	b.n	8003714 <_malloc_r+0xa8>
 800373c:	4623      	mov	r3, r4
 800373e:	6864      	ldr	r4, [r4, #4]
 8003740:	e7ae      	b.n	80036a0 <_malloc_r+0x34>
 8003742:	463c      	mov	r4, r7
 8003744:	687f      	ldr	r7, [r7, #4]
 8003746:	e7b6      	b.n	80036b6 <_malloc_r+0x4a>
 8003748:	461a      	mov	r2, r3
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	42a3      	cmp	r3, r4
 800374e:	d1fb      	bne.n	8003748 <_malloc_r+0xdc>
 8003750:	2300      	movs	r3, #0
 8003752:	6053      	str	r3, [r2, #4]
 8003754:	e7de      	b.n	8003714 <_malloc_r+0xa8>
 8003756:	230c      	movs	r3, #12
 8003758:	6033      	str	r3, [r6, #0]
 800375a:	4630      	mov	r0, r6
 800375c:	f000 f80c 	bl	8003778 <__malloc_unlock>
 8003760:	e794      	b.n	800368c <_malloc_r+0x20>
 8003762:	6005      	str	r5, [r0, #0]
 8003764:	e7d6      	b.n	8003714 <_malloc_r+0xa8>
 8003766:	bf00      	nop
 8003768:	20000364 	.word	0x20000364

0800376c <__malloc_lock>:
 800376c:	4801      	ldr	r0, [pc, #4]	@ (8003774 <__malloc_lock+0x8>)
 800376e:	f000 b87b 	b.w	8003868 <__retarget_lock_acquire_recursive>
 8003772:	bf00      	nop
 8003774:	200004a4 	.word	0x200004a4

08003778 <__malloc_unlock>:
 8003778:	4801      	ldr	r0, [pc, #4]	@ (8003780 <__malloc_unlock+0x8>)
 800377a:	f000 b876 	b.w	800386a <__retarget_lock_release_recursive>
 800377e:	bf00      	nop
 8003780:	200004a4 	.word	0x200004a4

08003784 <siprintf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	b500      	push	{lr}
 8003788:	b09c      	sub	sp, #112	@ 0x70
 800378a:	ab1d      	add	r3, sp, #116	@ 0x74
 800378c:	9002      	str	r0, [sp, #8]
 800378e:	9006      	str	r0, [sp, #24]
 8003790:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003794:	4809      	ldr	r0, [pc, #36]	@ (80037bc <siprintf+0x38>)
 8003796:	9107      	str	r1, [sp, #28]
 8003798:	9104      	str	r1, [sp, #16]
 800379a:	4909      	ldr	r1, [pc, #36]	@ (80037c0 <siprintf+0x3c>)
 800379c:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	a902      	add	r1, sp, #8
 80037a8:	f000 f914 	bl	80039d4 <_svfiprintf_r>
 80037ac:	9b02      	ldr	r3, [sp, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	b01c      	add	sp, #112	@ 0x70
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b003      	add	sp, #12
 80037ba:	4770      	bx	lr
 80037bc:	2000015c 	.word	0x2000015c
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <strcat>:
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4602      	mov	r2, r0
 80037d8:	7814      	ldrb	r4, [r2, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	3201      	adds	r2, #1
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d1fa      	bne.n	80037d8 <strcat+0x4>
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ec:	2a00      	cmp	r2, #0
 80037ee:	d1f9      	bne.n	80037e4 <strcat+0x10>
 80037f0:	bd10      	pop	{r4, pc}
	...

080037f4 <_sbrk_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	4d06      	ldr	r5, [pc, #24]	@ (8003810 <_sbrk_r+0x1c>)
 80037f8:	2300      	movs	r3, #0
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	f7fd fe70 	bl	80014e4 <_sbrk>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_sbrk_r+0x1a>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_sbrk_r+0x1a>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	200004a0 	.word	0x200004a0

08003814 <__errno>:
 8003814:	4b01      	ldr	r3, [pc, #4]	@ (800381c <__errno+0x8>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000015c 	.word	0x2000015c

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	4d0d      	ldr	r5, [pc, #52]	@ (8003858 <__libc_init_array+0x38>)
 8003824:	4c0d      	ldr	r4, [pc, #52]	@ (800385c <__libc_init_array+0x3c>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	2600      	movs	r6, #0
 800382c:	42a6      	cmp	r6, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	4d0b      	ldr	r5, [pc, #44]	@ (8003860 <__libc_init_array+0x40>)
 8003832:	4c0c      	ldr	r4, [pc, #48]	@ (8003864 <__libc_init_array+0x44>)
 8003834:	f000 fba8 	bl	8003f88 <_init>
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	2600      	movs	r6, #0
 800383e:	42a6      	cmp	r6, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f855 3b04 	ldr.w	r3, [r5], #4
 8003848:	4798      	blx	r3
 800384a:	3601      	adds	r6, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003852:	4798      	blx	r3
 8003854:	3601      	adds	r6, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	08004044 	.word	0x08004044
 800385c:	08004044 	.word	0x08004044
 8003860:	08004044 	.word	0x08004044
 8003864:	08004048 	.word	0x08004048

08003868 <__retarget_lock_acquire_recursive>:
 8003868:	4770      	bx	lr

0800386a <__retarget_lock_release_recursive>:
 800386a:	4770      	bx	lr

0800386c <memcpy>:
 800386c:	440a      	add	r2, r1
 800386e:	4291      	cmp	r1, r2
 8003870:	f100 33ff 	add.w	r3, r0, #4294967295
 8003874:	d100      	bne.n	8003878 <memcpy+0xc>
 8003876:	4770      	bx	lr
 8003878:	b510      	push	{r4, lr}
 800387a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800387e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003882:	4291      	cmp	r1, r2
 8003884:	d1f9      	bne.n	800387a <memcpy+0xe>
 8003886:	bd10      	pop	{r4, pc}

08003888 <_free_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4605      	mov	r5, r0
 800388c:	2900      	cmp	r1, #0
 800388e:	d041      	beq.n	8003914 <_free_r+0x8c>
 8003890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003894:	1f0c      	subs	r4, r1, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	bfb8      	it	lt
 800389a:	18e4      	addlt	r4, r4, r3
 800389c:	f7ff ff66 	bl	800376c <__malloc_lock>
 80038a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <_free_r+0x90>)
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	b933      	cbnz	r3, 80038b4 <_free_r+0x2c>
 80038a6:	6063      	str	r3, [r4, #4]
 80038a8:	6014      	str	r4, [r2, #0]
 80038aa:	4628      	mov	r0, r5
 80038ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b0:	f7ff bf62 	b.w	8003778 <__malloc_unlock>
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d908      	bls.n	80038ca <_free_r+0x42>
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	1821      	adds	r1, r4, r0
 80038bc:	428b      	cmp	r3, r1
 80038be:	bf01      	itttt	eq
 80038c0:	6819      	ldreq	r1, [r3, #0]
 80038c2:	685b      	ldreq	r3, [r3, #4]
 80038c4:	1809      	addeq	r1, r1, r0
 80038c6:	6021      	streq	r1, [r4, #0]
 80038c8:	e7ed      	b.n	80038a6 <_free_r+0x1e>
 80038ca:	461a      	mov	r2, r3
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b10b      	cbz	r3, 80038d4 <_free_r+0x4c>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d9fa      	bls.n	80038ca <_free_r+0x42>
 80038d4:	6811      	ldr	r1, [r2, #0]
 80038d6:	1850      	adds	r0, r2, r1
 80038d8:	42a0      	cmp	r0, r4
 80038da:	d10b      	bne.n	80038f4 <_free_r+0x6c>
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	4401      	add	r1, r0
 80038e0:	1850      	adds	r0, r2, r1
 80038e2:	4283      	cmp	r3, r0
 80038e4:	6011      	str	r1, [r2, #0]
 80038e6:	d1e0      	bne.n	80038aa <_free_r+0x22>
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	6053      	str	r3, [r2, #4]
 80038ee:	4408      	add	r0, r1
 80038f0:	6010      	str	r0, [r2, #0]
 80038f2:	e7da      	b.n	80038aa <_free_r+0x22>
 80038f4:	d902      	bls.n	80038fc <_free_r+0x74>
 80038f6:	230c      	movs	r3, #12
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	e7d6      	b.n	80038aa <_free_r+0x22>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	1821      	adds	r1, r4, r0
 8003900:	428b      	cmp	r3, r1
 8003902:	bf04      	itt	eq
 8003904:	6819      	ldreq	r1, [r3, #0]
 8003906:	685b      	ldreq	r3, [r3, #4]
 8003908:	6063      	str	r3, [r4, #4]
 800390a:	bf04      	itt	eq
 800390c:	1809      	addeq	r1, r1, r0
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	6054      	str	r4, [r2, #4]
 8003912:	e7ca      	b.n	80038aa <_free_r+0x22>
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	bf00      	nop
 8003918:	20000364 	.word	0x20000364

0800391c <__ssputs_r>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	688e      	ldr	r6, [r1, #8]
 8003922:	461f      	mov	r7, r3
 8003924:	42be      	cmp	r6, r7
 8003926:	680b      	ldr	r3, [r1, #0]
 8003928:	4682      	mov	sl, r0
 800392a:	460c      	mov	r4, r1
 800392c:	4690      	mov	r8, r2
 800392e:	d82d      	bhi.n	800398c <__ssputs_r+0x70>
 8003930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003938:	d026      	beq.n	8003988 <__ssputs_r+0x6c>
 800393a:	6965      	ldr	r5, [r4, #20]
 800393c:	6909      	ldr	r1, [r1, #16]
 800393e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003942:	eba3 0901 	sub.w	r9, r3, r1
 8003946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800394a:	1c7b      	adds	r3, r7, #1
 800394c:	444b      	add	r3, r9
 800394e:	106d      	asrs	r5, r5, #1
 8003950:	429d      	cmp	r5, r3
 8003952:	bf38      	it	cc
 8003954:	461d      	movcc	r5, r3
 8003956:	0553      	lsls	r3, r2, #21
 8003958:	d527      	bpl.n	80039aa <__ssputs_r+0x8e>
 800395a:	4629      	mov	r1, r5
 800395c:	f7ff fe86 	bl	800366c <_malloc_r>
 8003960:	4606      	mov	r6, r0
 8003962:	b360      	cbz	r0, 80039be <__ssputs_r+0xa2>
 8003964:	6921      	ldr	r1, [r4, #16]
 8003966:	464a      	mov	r2, r9
 8003968:	f7ff ff80 	bl	800386c <memcpy>
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	6126      	str	r6, [r4, #16]
 800397a:	6165      	str	r5, [r4, #20]
 800397c:	444e      	add	r6, r9
 800397e:	eba5 0509 	sub.w	r5, r5, r9
 8003982:	6026      	str	r6, [r4, #0]
 8003984:	60a5      	str	r5, [r4, #8]
 8003986:	463e      	mov	r6, r7
 8003988:	42be      	cmp	r6, r7
 800398a:	d900      	bls.n	800398e <__ssputs_r+0x72>
 800398c:	463e      	mov	r6, r7
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	4632      	mov	r2, r6
 8003992:	4641      	mov	r1, r8
 8003994:	f000 faa8 	bl	8003ee8 <memmove>
 8003998:	68a3      	ldr	r3, [r4, #8]
 800399a:	1b9b      	subs	r3, r3, r6
 800399c:	60a3      	str	r3, [r4, #8]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	4433      	add	r3, r6
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	2000      	movs	r0, #0
 80039a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039aa:	462a      	mov	r2, r5
 80039ac:	f000 fab6 	bl	8003f1c <_realloc_r>
 80039b0:	4606      	mov	r6, r0
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d1e0      	bne.n	8003978 <__ssputs_r+0x5c>
 80039b6:	6921      	ldr	r1, [r4, #16]
 80039b8:	4650      	mov	r0, sl
 80039ba:	f7ff ff65 	bl	8003888 <_free_r>
 80039be:	230c      	movs	r3, #12
 80039c0:	f8ca 3000 	str.w	r3, [sl]
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	e7e9      	b.n	80039a6 <__ssputs_r+0x8a>
	...

080039d4 <_svfiprintf_r>:
 80039d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d8:	4698      	mov	r8, r3
 80039da:	898b      	ldrh	r3, [r1, #12]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	b09d      	sub	sp, #116	@ 0x74
 80039e0:	4607      	mov	r7, r0
 80039e2:	460d      	mov	r5, r1
 80039e4:	4614      	mov	r4, r2
 80039e6:	d510      	bpl.n	8003a0a <_svfiprintf_r+0x36>
 80039e8:	690b      	ldr	r3, [r1, #16]
 80039ea:	b973      	cbnz	r3, 8003a0a <_svfiprintf_r+0x36>
 80039ec:	2140      	movs	r1, #64	@ 0x40
 80039ee:	f7ff fe3d 	bl	800366c <_malloc_r>
 80039f2:	6028      	str	r0, [r5, #0]
 80039f4:	6128      	str	r0, [r5, #16]
 80039f6:	b930      	cbnz	r0, 8003a06 <_svfiprintf_r+0x32>
 80039f8:	230c      	movs	r3, #12
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	b01d      	add	sp, #116	@ 0x74
 8003a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a06:	2340      	movs	r3, #64	@ 0x40
 8003a08:	616b      	str	r3, [r5, #20]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a0e:	2320      	movs	r3, #32
 8003a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a18:	2330      	movs	r3, #48	@ 0x30
 8003a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bb8 <_svfiprintf_r+0x1e4>
 8003a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a22:	f04f 0901 	mov.w	r9, #1
 8003a26:	4623      	mov	r3, r4
 8003a28:	469a      	mov	sl, r3
 8003a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a2e:	b10a      	cbz	r2, 8003a34 <_svfiprintf_r+0x60>
 8003a30:	2a25      	cmp	r2, #37	@ 0x25
 8003a32:	d1f9      	bne.n	8003a28 <_svfiprintf_r+0x54>
 8003a34:	ebba 0b04 	subs.w	fp, sl, r4
 8003a38:	d00b      	beq.n	8003a52 <_svfiprintf_r+0x7e>
 8003a3a:	465b      	mov	r3, fp
 8003a3c:	4622      	mov	r2, r4
 8003a3e:	4629      	mov	r1, r5
 8003a40:	4638      	mov	r0, r7
 8003a42:	f7ff ff6b 	bl	800391c <__ssputs_r>
 8003a46:	3001      	adds	r0, #1
 8003a48:	f000 80a7 	beq.w	8003b9a <_svfiprintf_r+0x1c6>
 8003a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a4e:	445a      	add	r2, fp
 8003a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a52:	f89a 3000 	ldrb.w	r3, [sl]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 809f 	beq.w	8003b9a <_svfiprintf_r+0x1c6>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a66:	f10a 0a01 	add.w	sl, sl, #1
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	9307      	str	r3, [sp, #28]
 8003a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a74:	4654      	mov	r4, sl
 8003a76:	2205      	movs	r2, #5
 8003a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a7c:	484e      	ldr	r0, [pc, #312]	@ (8003bb8 <_svfiprintf_r+0x1e4>)
 8003a7e:	f7fc fbaf 	bl	80001e0 <memchr>
 8003a82:	9a04      	ldr	r2, [sp, #16]
 8003a84:	b9d8      	cbnz	r0, 8003abe <_svfiprintf_r+0xea>
 8003a86:	06d0      	lsls	r0, r2, #27
 8003a88:	bf44      	itt	mi
 8003a8a:	2320      	movmi	r3, #32
 8003a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a90:	0711      	lsls	r1, r2, #28
 8003a92:	bf44      	itt	mi
 8003a94:	232b      	movmi	r3, #43	@ 0x2b
 8003a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aa0:	d015      	beq.n	8003ace <_svfiprintf_r+0xfa>
 8003aa2:	9a07      	ldr	r2, [sp, #28]
 8003aa4:	4654      	mov	r4, sl
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f04f 0c0a 	mov.w	ip, #10
 8003aac:	4621      	mov	r1, r4
 8003aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ab2:	3b30      	subs	r3, #48	@ 0x30
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d94b      	bls.n	8003b50 <_svfiprintf_r+0x17c>
 8003ab8:	b1b0      	cbz	r0, 8003ae8 <_svfiprintf_r+0x114>
 8003aba:	9207      	str	r2, [sp, #28]
 8003abc:	e014      	b.n	8003ae8 <_svfiprintf_r+0x114>
 8003abe:	eba0 0308 	sub.w	r3, r0, r8
 8003ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	46a2      	mov	sl, r4
 8003acc:	e7d2      	b.n	8003a74 <_svfiprintf_r+0xa0>
 8003ace:	9b03      	ldr	r3, [sp, #12]
 8003ad0:	1d19      	adds	r1, r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	9103      	str	r1, [sp, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfbb      	ittet	lt
 8003ada:	425b      	neglt	r3, r3
 8003adc:	f042 0202 	orrlt.w	r2, r2, #2
 8003ae0:	9307      	strge	r3, [sp, #28]
 8003ae2:	9307      	strlt	r3, [sp, #28]
 8003ae4:	bfb8      	it	lt
 8003ae6:	9204      	strlt	r2, [sp, #16]
 8003ae8:	7823      	ldrb	r3, [r4, #0]
 8003aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003aec:	d10a      	bne.n	8003b04 <_svfiprintf_r+0x130>
 8003aee:	7863      	ldrb	r3, [r4, #1]
 8003af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af2:	d132      	bne.n	8003b5a <_svfiprintf_r+0x186>
 8003af4:	9b03      	ldr	r3, [sp, #12]
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	9203      	str	r2, [sp, #12]
 8003afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b00:	3402      	adds	r4, #2
 8003b02:	9305      	str	r3, [sp, #20]
 8003b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bc8 <_svfiprintf_r+0x1f4>
 8003b08:	7821      	ldrb	r1, [r4, #0]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	4650      	mov	r0, sl
 8003b0e:	f7fc fb67 	bl	80001e0 <memchr>
 8003b12:	b138      	cbz	r0, 8003b24 <_svfiprintf_r+0x150>
 8003b14:	9b04      	ldr	r3, [sp, #16]
 8003b16:	eba0 000a 	sub.w	r0, r0, sl
 8003b1a:	2240      	movs	r2, #64	@ 0x40
 8003b1c:	4082      	lsls	r2, r0
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	3401      	adds	r4, #1
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b28:	4824      	ldr	r0, [pc, #144]	@ (8003bbc <_svfiprintf_r+0x1e8>)
 8003b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b2e:	2206      	movs	r2, #6
 8003b30:	f7fc fb56 	bl	80001e0 <memchr>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d036      	beq.n	8003ba6 <_svfiprintf_r+0x1d2>
 8003b38:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <_svfiprintf_r+0x1ec>)
 8003b3a:	bb1b      	cbnz	r3, 8003b84 <_svfiprintf_r+0x1b0>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	3307      	adds	r3, #7
 8003b40:	f023 0307 	bic.w	r3, r3, #7
 8003b44:	3308      	adds	r3, #8
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b4a:	4433      	add	r3, r6
 8003b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b4e:	e76a      	b.n	8003a26 <_svfiprintf_r+0x52>
 8003b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b54:	460c      	mov	r4, r1
 8003b56:	2001      	movs	r0, #1
 8003b58:	e7a8      	b.n	8003aac <_svfiprintf_r+0xd8>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	3401      	adds	r4, #1
 8003b5e:	9305      	str	r3, [sp, #20]
 8003b60:	4619      	mov	r1, r3
 8003b62:	f04f 0c0a 	mov.w	ip, #10
 8003b66:	4620      	mov	r0, r4
 8003b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b6c:	3a30      	subs	r2, #48	@ 0x30
 8003b6e:	2a09      	cmp	r2, #9
 8003b70:	d903      	bls.n	8003b7a <_svfiprintf_r+0x1a6>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0c6      	beq.n	8003b04 <_svfiprintf_r+0x130>
 8003b76:	9105      	str	r1, [sp, #20]
 8003b78:	e7c4      	b.n	8003b04 <_svfiprintf_r+0x130>
 8003b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b7e:	4604      	mov	r4, r0
 8003b80:	2301      	movs	r3, #1
 8003b82:	e7f0      	b.n	8003b66 <_svfiprintf_r+0x192>
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <_svfiprintf_r+0x1f0>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f3af 8000 	nop.w
 8003b94:	1c42      	adds	r2, r0, #1
 8003b96:	4606      	mov	r6, r0
 8003b98:	d1d6      	bne.n	8003b48 <_svfiprintf_r+0x174>
 8003b9a:	89ab      	ldrh	r3, [r5, #12]
 8003b9c:	065b      	lsls	r3, r3, #25
 8003b9e:	f53f af2d 	bmi.w	80039fc <_svfiprintf_r+0x28>
 8003ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ba4:	e72c      	b.n	8003a00 <_svfiprintf_r+0x2c>
 8003ba6:	ab03      	add	r3, sp, #12
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	462a      	mov	r2, r5
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <_svfiprintf_r+0x1f0>)
 8003bae:	a904      	add	r1, sp, #16
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f000 f879 	bl	8003ca8 <_printf_i>
 8003bb6:	e7ed      	b.n	8003b94 <_svfiprintf_r+0x1c0>
 8003bb8:	08004008 	.word	0x08004008
 8003bbc:	08004012 	.word	0x08004012
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	0800391d 	.word	0x0800391d
 8003bc8:	0800400e 	.word	0x0800400e

08003bcc <_printf_common>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	4698      	mov	r8, r3
 8003bd4:	688a      	ldr	r2, [r1, #8]
 8003bd6:	690b      	ldr	r3, [r1, #16]
 8003bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bfb8      	it	lt
 8003be0:	4613      	movlt	r3, r2
 8003be2:	6033      	str	r3, [r6, #0]
 8003be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003be8:	4607      	mov	r7, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b10a      	cbz	r2, 8003bf2 <_printf_common+0x26>
 8003bee:	3301      	adds	r3, #1
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	0699      	lsls	r1, r3, #26
 8003bf6:	bf42      	ittt	mi
 8003bf8:	6833      	ldrmi	r3, [r6, #0]
 8003bfa:	3302      	addmi	r3, #2
 8003bfc:	6033      	strmi	r3, [r6, #0]
 8003bfe:	6825      	ldr	r5, [r4, #0]
 8003c00:	f015 0506 	ands.w	r5, r5, #6
 8003c04:	d106      	bne.n	8003c14 <_printf_common+0x48>
 8003c06:	f104 0a19 	add.w	sl, r4, #25
 8003c0a:	68e3      	ldr	r3, [r4, #12]
 8003c0c:	6832      	ldr	r2, [r6, #0]
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	dc26      	bgt.n	8003c62 <_printf_common+0x96>
 8003c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	3b00      	subs	r3, #0
 8003c1c:	bf18      	it	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	0692      	lsls	r2, r2, #26
 8003c22:	d42b      	bmi.n	8003c7c <_printf_common+0xb0>
 8003c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c28:	4641      	mov	r1, r8
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c8      	blx	r9
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d01e      	beq.n	8003c70 <_printf_common+0xa4>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	6922      	ldr	r2, [r4, #16]
 8003c36:	f003 0306 	and.w	r3, r3, #6
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	bf02      	ittt	eq
 8003c3e:	68e5      	ldreq	r5, [r4, #12]
 8003c40:	6833      	ldreq	r3, [r6, #0]
 8003c42:	1aed      	subeq	r5, r5, r3
 8003c44:	68a3      	ldr	r3, [r4, #8]
 8003c46:	bf0c      	ite	eq
 8003c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c4c:	2500      	movne	r5, #0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bfc4      	itt	gt
 8003c52:	1a9b      	subgt	r3, r3, r2
 8003c54:	18ed      	addgt	r5, r5, r3
 8003c56:	2600      	movs	r6, #0
 8003c58:	341a      	adds	r4, #26
 8003c5a:	42b5      	cmp	r5, r6
 8003c5c:	d11a      	bne.n	8003c94 <_printf_common+0xc8>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e008      	b.n	8003c74 <_printf_common+0xa8>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4652      	mov	r2, sl
 8003c66:	4641      	mov	r1, r8
 8003c68:	4638      	mov	r0, r7
 8003c6a:	47c8      	blx	r9
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d103      	bne.n	8003c78 <_printf_common+0xac>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c78:	3501      	adds	r5, #1
 8003c7a:	e7c6      	b.n	8003c0a <_printf_common+0x3e>
 8003c7c:	18e1      	adds	r1, r4, r3
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	2030      	movs	r0, #48	@ 0x30
 8003c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c86:	4422      	add	r2, r4
 8003c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c90:	3302      	adds	r3, #2
 8003c92:	e7c7      	b.n	8003c24 <_printf_common+0x58>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4622      	mov	r2, r4
 8003c98:	4641      	mov	r1, r8
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	47c8      	blx	r9
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d0e6      	beq.n	8003c70 <_printf_common+0xa4>
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7d9      	b.n	8003c5a <_printf_common+0x8e>
	...

08003ca8 <_printf_i>:
 8003ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	7e0f      	ldrb	r7, [r1, #24]
 8003cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cb0:	2f78      	cmp	r7, #120	@ 0x78
 8003cb2:	4691      	mov	r9, r2
 8003cb4:	4680      	mov	r8, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	469a      	mov	sl, r3
 8003cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cbe:	d807      	bhi.n	8003cd0 <_printf_i+0x28>
 8003cc0:	2f62      	cmp	r7, #98	@ 0x62
 8003cc2:	d80a      	bhi.n	8003cda <_printf_i+0x32>
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	f000 80d2 	beq.w	8003e6e <_printf_i+0x1c6>
 8003cca:	2f58      	cmp	r7, #88	@ 0x58
 8003ccc:	f000 80b9 	beq.w	8003e42 <_printf_i+0x19a>
 8003cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cd8:	e03a      	b.n	8003d50 <_printf_i+0xa8>
 8003cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cde:	2b15      	cmp	r3, #21
 8003ce0:	d8f6      	bhi.n	8003cd0 <_printf_i+0x28>
 8003ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ce8 <_printf_i+0x40>)
 8003ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ce8:	08003d41 	.word	0x08003d41
 8003cec:	08003d55 	.word	0x08003d55
 8003cf0:	08003cd1 	.word	0x08003cd1
 8003cf4:	08003cd1 	.word	0x08003cd1
 8003cf8:	08003cd1 	.word	0x08003cd1
 8003cfc:	08003cd1 	.word	0x08003cd1
 8003d00:	08003d55 	.word	0x08003d55
 8003d04:	08003cd1 	.word	0x08003cd1
 8003d08:	08003cd1 	.word	0x08003cd1
 8003d0c:	08003cd1 	.word	0x08003cd1
 8003d10:	08003cd1 	.word	0x08003cd1
 8003d14:	08003e55 	.word	0x08003e55
 8003d18:	08003d7f 	.word	0x08003d7f
 8003d1c:	08003e0f 	.word	0x08003e0f
 8003d20:	08003cd1 	.word	0x08003cd1
 8003d24:	08003cd1 	.word	0x08003cd1
 8003d28:	08003e77 	.word	0x08003e77
 8003d2c:	08003cd1 	.word	0x08003cd1
 8003d30:	08003d7f 	.word	0x08003d7f
 8003d34:	08003cd1 	.word	0x08003cd1
 8003d38:	08003cd1 	.word	0x08003cd1
 8003d3c:	08003e17 	.word	0x08003e17
 8003d40:	6833      	ldr	r3, [r6, #0]
 8003d42:	1d1a      	adds	r2, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6032      	str	r2, [r6, #0]
 8003d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d50:	2301      	movs	r3, #1
 8003d52:	e09d      	b.n	8003e90 <_printf_i+0x1e8>
 8003d54:	6833      	ldr	r3, [r6, #0]
 8003d56:	6820      	ldr	r0, [r4, #0]
 8003d58:	1d19      	adds	r1, r3, #4
 8003d5a:	6031      	str	r1, [r6, #0]
 8003d5c:	0606      	lsls	r6, r0, #24
 8003d5e:	d501      	bpl.n	8003d64 <_printf_i+0xbc>
 8003d60:	681d      	ldr	r5, [r3, #0]
 8003d62:	e003      	b.n	8003d6c <_printf_i+0xc4>
 8003d64:	0645      	lsls	r5, r0, #25
 8003d66:	d5fb      	bpl.n	8003d60 <_printf_i+0xb8>
 8003d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d6c:	2d00      	cmp	r5, #0
 8003d6e:	da03      	bge.n	8003d78 <_printf_i+0xd0>
 8003d70:	232d      	movs	r3, #45	@ 0x2d
 8003d72:	426d      	negs	r5, r5
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d78:	4859      	ldr	r0, [pc, #356]	@ (8003ee0 <_printf_i+0x238>)
 8003d7a:	230a      	movs	r3, #10
 8003d7c:	e011      	b.n	8003da2 <_printf_i+0xfa>
 8003d7e:	6821      	ldr	r1, [r4, #0]
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	0608      	lsls	r0, r1, #24
 8003d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d88:	d402      	bmi.n	8003d90 <_printf_i+0xe8>
 8003d8a:	0649      	lsls	r1, r1, #25
 8003d8c:	bf48      	it	mi
 8003d8e:	b2ad      	uxthmi	r5, r5
 8003d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d92:	4853      	ldr	r0, [pc, #332]	@ (8003ee0 <_printf_i+0x238>)
 8003d94:	6033      	str	r3, [r6, #0]
 8003d96:	bf14      	ite	ne
 8003d98:	230a      	movne	r3, #10
 8003d9a:	2308      	moveq	r3, #8
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003da2:	6866      	ldr	r6, [r4, #4]
 8003da4:	60a6      	str	r6, [r4, #8]
 8003da6:	2e00      	cmp	r6, #0
 8003da8:	bfa2      	ittt	ge
 8003daa:	6821      	ldrge	r1, [r4, #0]
 8003dac:	f021 0104 	bicge.w	r1, r1, #4
 8003db0:	6021      	strge	r1, [r4, #0]
 8003db2:	b90d      	cbnz	r5, 8003db8 <_printf_i+0x110>
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	d04b      	beq.n	8003e50 <_printf_i+0x1a8>
 8003db8:	4616      	mov	r6, r2
 8003dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8003dc2:	5dc7      	ldrb	r7, [r0, r7]
 8003dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dc8:	462f      	mov	r7, r5
 8003dca:	42bb      	cmp	r3, r7
 8003dcc:	460d      	mov	r5, r1
 8003dce:	d9f4      	bls.n	8003dba <_printf_i+0x112>
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d10b      	bne.n	8003dec <_printf_i+0x144>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	07df      	lsls	r7, r3, #31
 8003dd8:	d508      	bpl.n	8003dec <_printf_i+0x144>
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	6861      	ldr	r1, [r4, #4]
 8003dde:	4299      	cmp	r1, r3
 8003de0:	bfde      	ittt	le
 8003de2:	2330      	movle	r3, #48	@ 0x30
 8003de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003de8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dec:	1b92      	subs	r2, r2, r6
 8003dee:	6122      	str	r2, [r4, #16]
 8003df0:	f8cd a000 	str.w	sl, [sp]
 8003df4:	464b      	mov	r3, r9
 8003df6:	aa03      	add	r2, sp, #12
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff fee6 	bl	8003bcc <_printf_common>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d14a      	bne.n	8003e9a <_printf_i+0x1f2>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	b004      	add	sp, #16
 8003e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	f043 0320 	orr.w	r3, r3, #32
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	4833      	ldr	r0, [pc, #204]	@ (8003ee4 <_printf_i+0x23c>)
 8003e18:	2778      	movs	r7, #120	@ 0x78
 8003e1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	6831      	ldr	r1, [r6, #0]
 8003e22:	061f      	lsls	r7, r3, #24
 8003e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e28:	d402      	bmi.n	8003e30 <_printf_i+0x188>
 8003e2a:	065f      	lsls	r7, r3, #25
 8003e2c:	bf48      	it	mi
 8003e2e:	b2ad      	uxthmi	r5, r5
 8003e30:	6031      	str	r1, [r6, #0]
 8003e32:	07d9      	lsls	r1, r3, #31
 8003e34:	bf44      	itt	mi
 8003e36:	f043 0320 	orrmi.w	r3, r3, #32
 8003e3a:	6023      	strmi	r3, [r4, #0]
 8003e3c:	b11d      	cbz	r5, 8003e46 <_printf_i+0x19e>
 8003e3e:	2310      	movs	r3, #16
 8003e40:	e7ac      	b.n	8003d9c <_printf_i+0xf4>
 8003e42:	4827      	ldr	r0, [pc, #156]	@ (8003ee0 <_printf_i+0x238>)
 8003e44:	e7e9      	b.n	8003e1a <_printf_i+0x172>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	f023 0320 	bic.w	r3, r3, #32
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	e7f6      	b.n	8003e3e <_printf_i+0x196>
 8003e50:	4616      	mov	r6, r2
 8003e52:	e7bd      	b.n	8003dd0 <_printf_i+0x128>
 8003e54:	6833      	ldr	r3, [r6, #0]
 8003e56:	6825      	ldr	r5, [r4, #0]
 8003e58:	6961      	ldr	r1, [r4, #20]
 8003e5a:	1d18      	adds	r0, r3, #4
 8003e5c:	6030      	str	r0, [r6, #0]
 8003e5e:	062e      	lsls	r6, r5, #24
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	d501      	bpl.n	8003e68 <_printf_i+0x1c0>
 8003e64:	6019      	str	r1, [r3, #0]
 8003e66:	e002      	b.n	8003e6e <_printf_i+0x1c6>
 8003e68:	0668      	lsls	r0, r5, #25
 8003e6a:	d5fb      	bpl.n	8003e64 <_printf_i+0x1bc>
 8003e6c:	8019      	strh	r1, [r3, #0]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6123      	str	r3, [r4, #16]
 8003e72:	4616      	mov	r6, r2
 8003e74:	e7bc      	b.n	8003df0 <_printf_i+0x148>
 8003e76:	6833      	ldr	r3, [r6, #0]
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	6032      	str	r2, [r6, #0]
 8003e7c:	681e      	ldr	r6, [r3, #0]
 8003e7e:	6862      	ldr	r2, [r4, #4]
 8003e80:	2100      	movs	r1, #0
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7fc f9ac 	bl	80001e0 <memchr>
 8003e88:	b108      	cbz	r0, 8003e8e <_printf_i+0x1e6>
 8003e8a:	1b80      	subs	r0, r0, r6
 8003e8c:	6060      	str	r0, [r4, #4]
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	6123      	str	r3, [r4, #16]
 8003e92:	2300      	movs	r3, #0
 8003e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e98:	e7aa      	b.n	8003df0 <_printf_i+0x148>
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	47d0      	blx	sl
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d0ad      	beq.n	8003e04 <_printf_i+0x15c>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	079b      	lsls	r3, r3, #30
 8003eac:	d413      	bmi.n	8003ed6 <_printf_i+0x22e>
 8003eae:	68e0      	ldr	r0, [r4, #12]
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	4298      	cmp	r0, r3
 8003eb4:	bfb8      	it	lt
 8003eb6:	4618      	movlt	r0, r3
 8003eb8:	e7a6      	b.n	8003e08 <_printf_i+0x160>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	47d0      	blx	sl
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d09d      	beq.n	8003e04 <_printf_i+0x15c>
 8003ec8:	3501      	adds	r5, #1
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	9903      	ldr	r1, [sp, #12]
 8003ece:	1a5b      	subs	r3, r3, r1
 8003ed0:	42ab      	cmp	r3, r5
 8003ed2:	dcf2      	bgt.n	8003eba <_printf_i+0x212>
 8003ed4:	e7eb      	b.n	8003eae <_printf_i+0x206>
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	f104 0619 	add.w	r6, r4, #25
 8003edc:	e7f5      	b.n	8003eca <_printf_i+0x222>
 8003ede:	bf00      	nop
 8003ee0:	08004019 	.word	0x08004019
 8003ee4:	0800402a 	.word	0x0800402a

08003ee8 <memmove>:
 8003ee8:	4288      	cmp	r0, r1
 8003eea:	b510      	push	{r4, lr}
 8003eec:	eb01 0402 	add.w	r4, r1, r2
 8003ef0:	d902      	bls.n	8003ef8 <memmove+0x10>
 8003ef2:	4284      	cmp	r4, r0
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	d807      	bhi.n	8003f08 <memmove+0x20>
 8003ef8:	1e43      	subs	r3, r0, #1
 8003efa:	42a1      	cmp	r1, r4
 8003efc:	d008      	beq.n	8003f10 <memmove+0x28>
 8003efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f06:	e7f8      	b.n	8003efa <memmove+0x12>
 8003f08:	4402      	add	r2, r0
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	428a      	cmp	r2, r1
 8003f0e:	d100      	bne.n	8003f12 <memmove+0x2a>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f1a:	e7f7      	b.n	8003f0c <memmove+0x24>

08003f1c <_realloc_r>:
 8003f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f20:	4680      	mov	r8, r0
 8003f22:	4615      	mov	r5, r2
 8003f24:	460c      	mov	r4, r1
 8003f26:	b921      	cbnz	r1, 8003f32 <_realloc_r+0x16>
 8003f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	f7ff bb9d 	b.w	800366c <_malloc_r>
 8003f32:	b92a      	cbnz	r2, 8003f40 <_realloc_r+0x24>
 8003f34:	f7ff fca8 	bl	8003888 <_free_r>
 8003f38:	2400      	movs	r4, #0
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f40:	f000 f81a 	bl	8003f78 <_malloc_usable_size_r>
 8003f44:	4285      	cmp	r5, r0
 8003f46:	4606      	mov	r6, r0
 8003f48:	d802      	bhi.n	8003f50 <_realloc_r+0x34>
 8003f4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f4e:	d8f4      	bhi.n	8003f3a <_realloc_r+0x1e>
 8003f50:	4629      	mov	r1, r5
 8003f52:	4640      	mov	r0, r8
 8003f54:	f7ff fb8a 	bl	800366c <_malloc_r>
 8003f58:	4607      	mov	r7, r0
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d0ec      	beq.n	8003f38 <_realloc_r+0x1c>
 8003f5e:	42b5      	cmp	r5, r6
 8003f60:	462a      	mov	r2, r5
 8003f62:	4621      	mov	r1, r4
 8003f64:	bf28      	it	cs
 8003f66:	4632      	movcs	r2, r6
 8003f68:	f7ff fc80 	bl	800386c <memcpy>
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f7ff fc8a 	bl	8003888 <_free_r>
 8003f74:	463c      	mov	r4, r7
 8003f76:	e7e0      	b.n	8003f3a <_realloc_r+0x1e>

08003f78 <_malloc_usable_size_r>:
 8003f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7c:	1f18      	subs	r0, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bfbc      	itt	lt
 8003f82:	580b      	ldrlt	r3, [r1, r0]
 8003f84:	18c0      	addlt	r0, r0, r3
 8003f86:	4770      	bx	lr

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
